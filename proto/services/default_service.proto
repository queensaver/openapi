/*
  Queensaver API

  Queensaver API to send in sensor data and retrieve it. It's also used for user management.

  The version of the OpenAPI document: 0.0.1

  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package openapi.services.defaultservice;

import "google/protobuf/empty.proto";
import public "models/bbox.proto";
import public "models/generic_post_response.proto";
import public "models/get_stands_response.proto";
import public "models/get_temperature_response.proto";
import public "models/hive.proto";
import public "models/post_stands_response.proto";
import public "models/stand.proto";
import public "models/temperature.proto";
import public "models/user.proto";
import public "models/varroa_scan.proto";
import public "models/varroa_scan_response.proto";
import public "models/weight.proto";

service DefaultService {
  rpc BboxesGet (google.protobuf.Empty) returns (BboxesGetResponse);

  rpc HivesDelete (HivesDeleteRequest) returns (google.protobuf.Empty);

  rpc HivesGet (HivesGetRequest) returns (HivesGetResponse);

  rpc HivesPost (HivesPostRequest) returns (Hive);

  rpc HivesPut (HivesPutRequest) returns (Hive);

  rpc LoginPost (LoginPostRequest) returns (google.protobuf.Empty);

  rpc ScaleGet (ScaleGetRequest) returns (ScaleGetResponse);

  rpc StandsDelete (StandsDeleteRequest) returns (google.protobuf.Empty);

  rpc StandsGet (StandsGetRequest) returns (GetStandsResponse);

  rpc StandsPost (StandsPostRequest) returns (PostStandsResponse);

  rpc StandsPut (StandsPutRequest) returns (Stand);

  rpc TemperatureGet (TemperatureGetRequest) returns (GetTemperatureResponse);

  rpc TemperaturePost (TemperaturePostRequest) returns (GenericPostResponse);

  rpc UserPost (UserPostRequest) returns (google.protobuf.Empty);

  rpc VarroaScanGet (VarroaScanGetRequest) returns (VarroaScanResponse);

  rpc VarroaScanImagePost (VarroaScanImagePostRequest) returns (google.protobuf.Empty);

  rpc VarroaScanPost (VarroaScanPostRequest) returns (google.protobuf.Empty);

}

message BboxesGetResponse {
  repeated Bbox data = 1;
}

message HivesDeleteRequest {
  // The UUID of the hive.
  string uuid = 1;

}

message HivesGetRequest {
  // The Unix Time (epoch) that defines the end time of the query. The beginning is defined by the secondsInThePast parameter. If unset, the epoch will be set to NOW()
  int64 epoch = 1;
  // How many seconds we go to the past to return data versions. If set to zero, we will return exactly one version.
  int64 secondsInThePast = 2;
  // The UUID of the hive. If not set, the request will return all hives.
  string uuid = 3;

}

message HivesGetResponse {
  repeated Hive data = 1;
}

message HivesPostRequest {
  Hive hive = 1;

}

message HivesPutRequest {
  Hive hive = 1;

}

message LoginPostRequest {
  // Username, must be unique to the queensaver system. We encourage using email-addresses here.
  string username = 1;
  // Password
  string password = 2;

}

message ScaleGetRequest {
  // Either the cookie or this Q-Token must be set to be authorized for the API call.
  string qToken = 1;
  // The Mac Address of the QBox client. You can get all QBox IDs and clients with the /config API call.
  string bhiveId = 2;
  // The Unix Time (epoch) that defines the end time of the scale measurements. The beginning is defined by the secondsInThePast parameter.
  int64 epoch = 3;
  // How many seconds we go to the past to get the data measurements.
  int64 secondsInThePast = 4;
  // Either this cookie or the Q-Token must be set to be authorized for the API call.
  string token = 5;

}

message ScaleGetResponse {
  repeated Weight data = 1;
}

message StandsDeleteRequest {
  // The UUID of the stand.
  string uuid = 1;

}

message StandsGetRequest {
  // Either the cookie or this Q-Token must be set to be authorized for the API call.
  string qToken = 1;
  // The Unix Time (epoch) that defines the end time of the query. The beginning is defined by the secondsInThePast parameter. If unset, the epoch will be set to NOW()
  int64 epoch = 2;
  // How many seconds we go to the past to return data versions. If set to zero, we will return exactly one version.
  int64 secondsInThePast = 3;
  // Either this cookie or the Q-Token must be set to be authorized for the API call.
  string token = 4;
  // The UUID of the stand. If not set, the request will return all stands.
  string uuid = 5;
  // The UserID is set internally and can not set or be overridden with the API request. Please ignore.
  int64 userId = 6;

}

message StandsPostRequest {
  // Either the cookie or this Q-Token must be set to be authorized for the API call.
  string qToken = 1;
  // Either this cookie or the Q-Token must be set to be authorized for the API call.
  string token = 2;
  // The UserID is set internally and can not set or be overridden with the API request. Please ignore.
  int64 userId = 3;
  Stand stand = 4;

}

message StandsPutRequest {
  Stand stand = 1;

}

message TemperatureGetRequest {
  // Either the cookie or this Q-Token must be set to be authorized for the API call.
  string qToken = 1;
  // The Mac Address of the QBox client. You can get all QBox IDs and clients with the /config API call.
  string bhiveId = 2;
  // The Unix Time (epoch) that defines the end time of the scale measurements. The beginning is defined by the secondsInThePast parameter.
  int64 epoch = 3;
  // How many seconds we go to the past to get the data measurements.
  int64 secondsInThePast = 4;
  // Either this cookie or the Q-Token must be set to be authorized for the API call.
  string token = 5;
  // The User ID. This is used internally and will be overwritten if you send it to the api server. Ignore.
  int64 userId = 6;

}

message TemperaturePostRequest {
  // The User ID. This is used internally and will be overwritten if you send it to the api server. Ignore.
  int64 userId = 1;
  Temperature temperature = 2;

}

message UserPostRequest {
  User user = 1;

}

message VarroaScanGetRequest {
  // Either the cookie or this Q-Token must be set to be authorized for the API call.
  string qToken = 1;
  // The Mac Address of the QBox client. You can get all QBox IDs and clients with the /config API call.
  string bhiveId = 2;
  // Either this cookie or the Q-Token must be set to be authorized for the API call.
  string token = 3;
  // The Unix Time (epoch) that defines the end time of the varroa images. The beginning is defined by the secondsInThePast parameter.
  int64 epoch = 4;
  // The UUID of the varra-scan. If not set, the request will return scans in the given time range. If this parameter is given we ignore all time ranges. This is currently not implemented.
  string uuid = 5;
  // The User ID. This is used internally and will be overwritten if you send it to the api server. Ignore.
  int64 userId = 6;
  // How many seconds we go to the past to get the data measurements.
  int64 secondsInThePast = 7;

}

message VarroaScanImagePostRequest {
  // Either the cookie or this Q-Token must be set to be authorized for the API call.
  string qToken = 1;
  // Either this cookie or the Q-Token must be set to be authorized for the API call.
  string token = 2;
  // the internal user id of the authenticated user. Will be set internally in the cloud system and does not have an effect if set via the API call as it will be overridden. Don't set this value.
  int64 userId = 3;
  // The Mac Address of the QBox client. You can get all QBox IDs and clients with the /config API call.
  string bhiveId = 4;
  // The Unix Time (epoch) that defines the end time of the varroa images. The beginning is defined by the secondsInThePast parameter.
  int64 epoch = 5;
  bytes scan = 6;

}

message VarroaScanPostRequest {
  // The User ID. This is used internally and will be overwritten if you send it to the api server. Ignore.
  int64 userId = 1;
  VarroaScan varroaScan = 2;

}

