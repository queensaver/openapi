/*
 * Queensaver API
 *
 * Queensaver API to send in sensor data and retrieve it. It's also used for user management.
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"encoding/json"
)



type Temperature struct {

	// bhiveId to identify the data source. Might become empty in a future iteration as it's redundant with the query parameter.
	BhiveId string `json:"bhiveId"`

	// actual measurement of the temperature
	Temperature float32 `json:"temperature"`

	// timestamp of the measurement on one second precision
	Epoch int64 `json:"epoch"`
}

// UnmarshalJSON sets *m to a copy of data while respecting defaults if specified.
func (m *Temperature) UnmarshalJSON(data []byte) error {

	type Alias Temperature // To avoid infinite recursion
    return json.Unmarshal(data, (*Alias)(m))
}

// AssertTemperatureRequired checks if the required fields are not zero-ed
func AssertTemperatureRequired(obj Temperature) error {
	elements := map[string]interface{}{
		"bhiveId": obj.BhiveId,
		"temperature": obj.Temperature,
		"epoch": obj.Epoch,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertTemperatureConstraints checks if the values respects the defined constraints
func AssertTemperatureConstraints(obj Temperature) error {
	return nil
}
