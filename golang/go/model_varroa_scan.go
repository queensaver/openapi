/*
 * Queensaver API
 *
 * Queensaver API to send in sensor data and retrieve it. It's also used for user management.
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"encoding/json"
)



type VarroaScan struct {

	// bhiveId to identify the data source. Might become empty in a future iteration as it's redundant with the query parameter.
	BhiveId string `json:"bhiveId,omitempty"`

	// URL to the image of the varroa scan
	ImageUrl string `json:"imageUrl,omitempty"`

	// timestamp of the measurement on one second precision
	Epoch int64 `json:"epoch,omitempty"`

	Metadata []VarroaScanMetadata `json:"metadata,omitempty"`

	// the number of varroa mites in a scan
	Mites int64 `json:"mites,omitempty"`

	// the scanned image data in binary format. this is used internally and won't surface at the API server (any data will be ignored).
	Scan string `json:"scan,omitempty"`

	// the UUID of the bee hive this scan has been associated to
	HiveUuid string `json:"hiveUuid,omitempty"`

	// the UUID of this scan
	Uuid string `json:"uuid,omitempty"`
}

// UnmarshalJSON sets *m to a copy of data while respecting defaults if specified.
func (m *VarroaScan) UnmarshalJSON(data []byte) error {

	type Alias VarroaScan // To avoid infinite recursion
    return json.Unmarshal(data, (*Alias)(m))
}

// AssertVarroaScanRequired checks if the required fields are not zero-ed
func AssertVarroaScanRequired(obj VarroaScan) error {
	for _, el := range obj.Metadata {
		if err := AssertVarroaScanMetadataRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertVarroaScanConstraints checks if the values respects the defined constraints
func AssertVarroaScanConstraints(obj VarroaScan) error {
	return nil
}
