/*
 * Queensaver API
 *
 * Queensaver API to send in sensor data and retrieve it. It's also used for user management.
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"encoding/json"
	"errors"
)



type Hive struct {

	// Name of the hive. Can be chosen by the user.
	Name string `json:"name"`

	// If the hive can be viewed by other users in the queensaver system
	Public bool `json:"public,omitempty"`

	// Unique Identifier of the stand that this hive is part of. Must be defined.
	StandUuid string `json:"standUuid"`

	// Unique Identifier for this hive
	Uuid string `json:"uuid,omitempty"`

	// Random note or user comment
	Comment string `json:"comment,omitempty"`

	// How many honeycombs a frame can load
	Capacity int32 `json:"capacity,omitempty"`

	// The format of the frame
	Format string `json:"format,omitempty"`

	// The number of frames the bee hive has
	Frames int32 `json:"frames,omitempty"`

	Alerts []Alerts `json:"alerts,omitempty"`

	// The ID of beehive electronics (bbox) - deprecated. Use the configUuid instead.
	BboxId string `json:"bboxId,omitempty"`

	// HTTP response code. Used for internal purposes, will be let out at the API level.
	HttpReponseCode int32 `json:"httpReponseCode,omitempty"`

	// Epoch when the data was last updated. This will be set internally, no need to add this with PUT or POST calls.
	Epoch int64 `json:"epoch,omitempty"`

	// if set to true, the hive has been deleted at this epoch.
	Deleted bool `json:"deleted,omitempty"`

	// The uuid of beehive electronics (bbox).
	ConfigUuid string `json:"configUuid,omitempty"`
}

// UnmarshalJSON sets *m to a copy of data while respecting defaults if specified.
func (m *Hive) UnmarshalJSON(data []byte) error {

	type Alias Hive // To avoid infinite recursion
    return json.Unmarshal(data, (*Alias)(m))
}

// AssertHiveRequired checks if the required fields are not zero-ed
func AssertHiveRequired(obj Hive) error {
	elements := map[string]interface{}{
		"name": obj.Name,
		"standUuid": obj.StandUuid,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Alerts {
		if err := AssertAlertsRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertHiveConstraints checks if the values respects the defined constraints
func AssertHiveConstraints(obj Hive) error {
	if obj.Capacity < 1 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.Capacity > 50 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	return nil
}
