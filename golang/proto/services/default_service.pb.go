//
//Queensaver API
//
//Queensaver API to send in sensor data and retrieve it. It's also used for user management.
//
//The version of the OpenAPI document: 0.0.1
//
//Generated by OpenAPI Generator: https://openapi-generator.tech

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: services/default_service.proto

package services

import (
	models "github.com/queensaver/openapi/golang/proto/models"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Symbols defined in public import of models/authenticate_post_response.proto.

type AuthenticatePostResponse = models.AuthenticatePostResponse

// Symbols defined in public import of models/bbox.proto.

type Bbox = models.Bbox

// Symbols defined in public import of models/bbox_config_response.proto.

type BboxConfigResponse = models.BboxConfigResponse

// Symbols defined in public import of models/generic_post_response.proto.

type GenericPostResponse = models.GenericPostResponse

// Symbols defined in public import of models/get_bbox_response.proto.

type GetBboxResponse = models.GetBboxResponse

// Symbols defined in public import of models/get_hives_response.proto.

type GetHivesResponse = models.GetHivesResponse

// Symbols defined in public import of models/get_stands_response.proto.

type GetStandsResponse = models.GetStandsResponse

// Symbols defined in public import of models/get_temperature_response.proto.

type GetTemperatureResponse = models.GetTemperatureResponse

// Symbols defined in public import of models/hive.proto.

type Hive_FormatEnum = models.Hive_FormatEnum

const Hive_FormatEnum_ZANDER = models.Hive_FormatEnum_ZANDER
const Hive_FormatEnum_DADANT = models.Hive_FormatEnum_DADANT

var Hive_FormatEnum_name = models.Hive_FormatEnum_name
var Hive_FormatEnum_value = models.Hive_FormatEnum_value

type Hive = models.Hive

// Symbols defined in public import of models/login_post_response.proto.

type LoginPostResponse = models.LoginPostResponse

// Symbols defined in public import of models/post_bbox_response.proto.

type PostBboxResponse = models.PostBboxResponse

// Symbols defined in public import of models/post_hives_response.proto.

type PostHivesResponse = models.PostHivesResponse

// Symbols defined in public import of models/post_stands_response.proto.

type PostStandsResponse = models.PostStandsResponse

// Symbols defined in public import of models/put_bbox_response.proto.

type PutBboxResponse = models.PutBboxResponse

// Symbols defined in public import of models/put_hive_response.proto.

type PutHiveResponse = models.PutHiveResponse

// Symbols defined in public import of models/put_stand_response.proto.

type PutStandResponse = models.PutStandResponse

// Symbols defined in public import of models/registration_id.proto.

type RegistrationId = models.RegistrationId

// Symbols defined in public import of models/scale_v2.proto.

type ScaleV2 = models.ScaleV2

// Symbols defined in public import of models/scale_v2_response.proto.

type ScaleV2Response = models.ScaleV2Response

// Symbols defined in public import of models/stand.proto.

type Stand = models.Stand

// Symbols defined in public import of models/temperature.proto.

type Temperature = models.Temperature

// Symbols defined in public import of models/user.proto.

type User = models.User

// Symbols defined in public import of models/varroa_scan.proto.

type VarroaScan = models.VarroaScan

// Symbols defined in public import of models/varroa_scan_response.proto.

type VarroaScanResponse = models.VarroaScanResponse

// Symbols defined in public import of models/weight.proto.

type Weight = models.Weight

type AuthenticateRegistrationIdPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegistrationId *models.RegistrationId `protobuf:"bytes,1,opt,name=registrationId,proto3" json:"registrationId,omitempty"`
}

func (x *AuthenticateRegistrationIdPostRequest) Reset() {
	*x = AuthenticateRegistrationIdPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_default_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticateRegistrationIdPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateRegistrationIdPostRequest) ProtoMessage() {}

func (x *AuthenticateRegistrationIdPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_default_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateRegistrationIdPostRequest.ProtoReflect.Descriptor instead.
func (*AuthenticateRegistrationIdPostRequest) Descriptor() ([]byte, []int) {
	return file_services_default_service_proto_rawDescGZIP(), []int{0}
}

func (x *AuthenticateRegistrationIdPostRequest) GetRegistrationId() *models.RegistrationId {
	if x != nil {
		return x.RegistrationId
	}
	return nil
}

type BboxesGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*models.Bbox `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *BboxesGetResponse) Reset() {
	*x = BboxesGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_default_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BboxesGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BboxesGetResponse) ProtoMessage() {}

func (x *BboxesGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_default_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BboxesGetResponse.ProtoReflect.Descriptor instead.
func (*BboxesGetResponse) Descriptor() ([]byte, []int) {
	return file_services_default_service_proto_rawDescGZIP(), []int{1}
}

func (x *BboxesGetResponse) GetData() []*models.Bbox {
	if x != nil {
		return x.Data
	}
	return nil
}

type ConfigsBboxAssociatePostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Mac Address of the bBox.
	BboxId string `protobuf:"bytes,1,opt,name=bboxId,proto3" json:"bboxId,omitempty"`
	// Unique Identifier for this hive
	HiveUuid string `protobuf:"bytes,2,opt,name=hiveUuid,proto3" json:"hiveUuid,omitempty"`
	// The UserID is set internally and can not set or be overridden with the API request. Please ignore.
	UserId int64 `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *ConfigsBboxAssociatePostRequest) Reset() {
	*x = ConfigsBboxAssociatePostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_default_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigsBboxAssociatePostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigsBboxAssociatePostRequest) ProtoMessage() {}

func (x *ConfigsBboxAssociatePostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_default_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigsBboxAssociatePostRequest.ProtoReflect.Descriptor instead.
func (*ConfigsBboxAssociatePostRequest) Descriptor() ([]byte, []int) {
	return file_services_default_service_proto_rawDescGZIP(), []int{2}
}

func (x *ConfigsBboxAssociatePostRequest) GetBboxId() string {
	if x != nil {
		return x.BboxId
	}
	return ""
}

func (x *ConfigsBboxAssociatePostRequest) GetHiveUuid() string {
	if x != nil {
		return x.HiveUuid
	}
	return ""
}

func (x *ConfigsBboxAssociatePostRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type ConfigsBboxDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Either the cookie or this Q-Token must be set to be authorized for the API call.
	QToken string `protobuf:"bytes,1,opt,name=qToken,proto3" json:"qToken,omitempty"`
	// The UUID of the bbox.
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Either this cookie or the Q-Token must be set to be authorized for the API call.
	Token string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	// The UserID is set internally and can not set or be overridden with the API request. Please ignore.
	UserId int64 `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *ConfigsBboxDeleteRequest) Reset() {
	*x = ConfigsBboxDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_default_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigsBboxDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigsBboxDeleteRequest) ProtoMessage() {}

func (x *ConfigsBboxDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_default_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigsBboxDeleteRequest.ProtoReflect.Descriptor instead.
func (*ConfigsBboxDeleteRequest) Descriptor() ([]byte, []int) {
	return file_services_default_service_proto_rawDescGZIP(), []int{3}
}

func (x *ConfigsBboxDeleteRequest) GetQToken() string {
	if x != nil {
		return x.QToken
	}
	return ""
}

func (x *ConfigsBboxDeleteRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ConfigsBboxDeleteRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ConfigsBboxDeleteRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type ConfigsBboxGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Either the cookie or this Q-Token must be set to be authorized for the API call.
	QToken string `protobuf:"bytes,1,opt,name=qToken,proto3" json:"qToken,omitempty"`
	// Either this cookie or the Q-Token must be set to be authorized for the API call.
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// The UUID of the bbox. If not set, the request will return all bboxes.
	Uuid string `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// The UserID is set internally and can not set or be overridden with the API request. Please ignore.
	UserId int64 `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *ConfigsBboxGetRequest) Reset() {
	*x = ConfigsBboxGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_default_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigsBboxGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigsBboxGetRequest) ProtoMessage() {}

func (x *ConfigsBboxGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_default_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigsBboxGetRequest.ProtoReflect.Descriptor instead.
func (*ConfigsBboxGetRequest) Descriptor() ([]byte, []int) {
	return file_services_default_service_proto_rawDescGZIP(), []int{4}
}

func (x *ConfigsBboxGetRequest) GetQToken() string {
	if x != nil {
		return x.QToken
	}
	return ""
}

func (x *ConfigsBboxGetRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ConfigsBboxGetRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ConfigsBboxGetRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type ConfigsBboxPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Either the cookie or this Q-Token must be set to be authorized for the API call.
	QToken string `protobuf:"bytes,1,opt,name=qToken,proto3" json:"qToken,omitempty"`
	// Either this cookie or the Q-Token must be set to be authorized for the API call.
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// The UserID is set internally and can not set or be overridden with the API request. Please ignore.
	UserId int64        `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	Bbox   *models.Bbox `protobuf:"bytes,4,opt,name=bbox,proto3" json:"bbox,omitempty"`
}

func (x *ConfigsBboxPostRequest) Reset() {
	*x = ConfigsBboxPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_default_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigsBboxPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigsBboxPostRequest) ProtoMessage() {}

func (x *ConfigsBboxPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_default_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigsBboxPostRequest.ProtoReflect.Descriptor instead.
func (*ConfigsBboxPostRequest) Descriptor() ([]byte, []int) {
	return file_services_default_service_proto_rawDescGZIP(), []int{5}
}

func (x *ConfigsBboxPostRequest) GetQToken() string {
	if x != nil {
		return x.QToken
	}
	return ""
}

func (x *ConfigsBboxPostRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ConfigsBboxPostRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ConfigsBboxPostRequest) GetBbox() *models.Bbox {
	if x != nil {
		return x.Bbox
	}
	return nil
}

type ConfigsBboxPutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Either the cookie or this Q-Token must be set to be authorized for the API call.
	QToken string `protobuf:"bytes,1,opt,name=qToken,proto3" json:"qToken,omitempty"`
	// The UUID of the bbox. Required. You can only update one bbox at a time.
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Either this cookie or the Q-Token must be set to be authorized for the API call.
	Token string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	// The UserID is set internally and can not set or be overridden with the API request. Please ignore.
	UserId int64        `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`
	Bbox   *models.Bbox `protobuf:"bytes,5,opt,name=bbox,proto3" json:"bbox,omitempty"`
}

func (x *ConfigsBboxPutRequest) Reset() {
	*x = ConfigsBboxPutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_default_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigsBboxPutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigsBboxPutRequest) ProtoMessage() {}

func (x *ConfigsBboxPutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_default_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigsBboxPutRequest.ProtoReflect.Descriptor instead.
func (*ConfigsBboxPutRequest) Descriptor() ([]byte, []int) {
	return file_services_default_service_proto_rawDescGZIP(), []int{6}
}

func (x *ConfigsBboxPutRequest) GetQToken() string {
	if x != nil {
		return x.QToken
	}
	return ""
}

func (x *ConfigsBboxPutRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ConfigsBboxPutRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ConfigsBboxPutRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ConfigsBboxPutRequest) GetBbox() *models.Bbox {
	if x != nil {
		return x.Bbox
	}
	return nil
}

type ConfigsBboxRegisterPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique registration Id for that scale. The user needs to register it first in the cloud, otherwise we will not accept the data.
	RegistrationId string `protobuf:"bytes,1,opt,name=registrationId,proto3" json:"registrationId,omitempty"`
	// The UserID is set internally and can not set or be overridden with the API request. Please ignore.
	UserId int64        `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Bbox   *models.Bbox `protobuf:"bytes,3,opt,name=bbox,proto3" json:"bbox,omitempty"`
}

func (x *ConfigsBboxRegisterPostRequest) Reset() {
	*x = ConfigsBboxRegisterPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_default_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigsBboxRegisterPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigsBboxRegisterPostRequest) ProtoMessage() {}

func (x *ConfigsBboxRegisterPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_default_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigsBboxRegisterPostRequest.ProtoReflect.Descriptor instead.
func (*ConfigsBboxRegisterPostRequest) Descriptor() ([]byte, []int) {
	return file_services_default_service_proto_rawDescGZIP(), []int{7}
}

func (x *ConfigsBboxRegisterPostRequest) GetRegistrationId() string {
	if x != nil {
		return x.RegistrationId
	}
	return ""
}

func (x *ConfigsBboxRegisterPostRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ConfigsBboxRegisterPostRequest) GetBbox() *models.Bbox {
	if x != nil {
		return x.Bbox
	}
	return nil
}

type HivesDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Either the cookie or this Q-Token must be set to be authorized for the API call.
	QToken string `protobuf:"bytes,1,opt,name=qToken,proto3" json:"qToken,omitempty"`
	// The UUID of the hive.
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Either this cookie or the Q-Token must be set to be authorized for the API call.
	Token string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	// The UserID is set internally and can not set or be overridden with the API request. Please ignore.
	UserId int64 `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *HivesDeleteRequest) Reset() {
	*x = HivesDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_default_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HivesDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HivesDeleteRequest) ProtoMessage() {}

func (x *HivesDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_default_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HivesDeleteRequest.ProtoReflect.Descriptor instead.
func (*HivesDeleteRequest) Descriptor() ([]byte, []int) {
	return file_services_default_service_proto_rawDescGZIP(), []int{8}
}

func (x *HivesDeleteRequest) GetQToken() string {
	if x != nil {
		return x.QToken
	}
	return ""
}

func (x *HivesDeleteRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *HivesDeleteRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *HivesDeleteRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type HivesGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Unix Time (epoch) that defines the end time of the query. The beginning is defined by the secondsInThePast parameter. If unset, the epoch will be set to NOW()
	Epoch int64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// How many seconds we go to the past to return data versions. If set to zero, we will return exactly one version.
	SecondsInThePast int64 `protobuf:"varint,2,opt,name=secondsInThePast,proto3" json:"secondsInThePast,omitempty"`
	// The UUID of the hive. If not set, the request will return all hives.
	Uuid string `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// The UserID is set internally and can not set or be overridden with the API request. Please ignore.
	UserId int64 `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *HivesGetRequest) Reset() {
	*x = HivesGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_default_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HivesGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HivesGetRequest) ProtoMessage() {}

func (x *HivesGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_default_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HivesGetRequest.ProtoReflect.Descriptor instead.
func (*HivesGetRequest) Descriptor() ([]byte, []int) {
	return file_services_default_service_proto_rawDescGZIP(), []int{9}
}

func (x *HivesGetRequest) GetEpoch() int64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *HivesGetRequest) GetSecondsInThePast() int64 {
	if x != nil {
		return x.SecondsInThePast
	}
	return 0
}

func (x *HivesGetRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *HivesGetRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type HivesPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Either the cookie or this Q-Token must be set to be authorized for the API call.
	QToken string `protobuf:"bytes,1,opt,name=qToken,proto3" json:"qToken,omitempty"`
	// Either this cookie or the Q-Token must be set to be authorized for the API call.
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// The UserID is set internally and can not set or be overridden with the API request. Please ignore.
	UserId int64        `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	Hive   *models.Hive `protobuf:"bytes,4,opt,name=hive,proto3" json:"hive,omitempty"`
}

func (x *HivesPostRequest) Reset() {
	*x = HivesPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_default_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HivesPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HivesPostRequest) ProtoMessage() {}

func (x *HivesPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_default_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HivesPostRequest.ProtoReflect.Descriptor instead.
func (*HivesPostRequest) Descriptor() ([]byte, []int) {
	return file_services_default_service_proto_rawDescGZIP(), []int{10}
}

func (x *HivesPostRequest) GetQToken() string {
	if x != nil {
		return x.QToken
	}
	return ""
}

func (x *HivesPostRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *HivesPostRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *HivesPostRequest) GetHive() *models.Hive {
	if x != nil {
		return x.Hive
	}
	return nil
}

type HivesPutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Either the cookie or this Q-Token must be set to be authorized for the API call.
	QToken string `protobuf:"bytes,1,opt,name=qToken,proto3" json:"qToken,omitempty"`
	// Either this cookie or the Q-Token must be set to be authorized for the API call.
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// The UserID is set internally and can not set or be overridden with the API request. Please ignore.
	UserId int64        `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	Hive   *models.Hive `protobuf:"bytes,4,opt,name=hive,proto3" json:"hive,omitempty"`
}

func (x *HivesPutRequest) Reset() {
	*x = HivesPutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_default_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HivesPutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HivesPutRequest) ProtoMessage() {}

func (x *HivesPutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_default_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HivesPutRequest.ProtoReflect.Descriptor instead.
func (*HivesPutRequest) Descriptor() ([]byte, []int) {
	return file_services_default_service_proto_rawDescGZIP(), []int{11}
}

func (x *HivesPutRequest) GetQToken() string {
	if x != nil {
		return x.QToken
	}
	return ""
}

func (x *HivesPutRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *HivesPutRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *HivesPutRequest) GetHive() *models.Hive {
	if x != nil {
		return x.Hive
	}
	return nil
}

type LoginPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Username, must be unique to the queensaver system. We encourage using email-addresses here.
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// Password
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *LoginPostRequest) Reset() {
	*x = LoginPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_default_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginPostRequest) ProtoMessage() {}

func (x *LoginPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_default_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginPostRequest.ProtoReflect.Descriptor instead.
func (*LoginPostRequest) Descriptor() ([]byte, []int) {
	return file_services_default_service_proto_rawDescGZIP(), []int{12}
}

func (x *LoginPostRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LoginPostRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type ScaleGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Mac Address of the QBox client. You can get all QBox IDs and clients with the /config API call.
	BhiveId string `protobuf:"bytes,1,opt,name=bhiveId,proto3" json:"bhiveId,omitempty"`
	// The Unix Time (epoch) that defines the end time of the scale measurements. The beginning is defined by the secondsInThePast parameter.
	Epoch int64 `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// How many seconds we go to the past to get the data measurements.
	SecondsInThePast int64 `protobuf:"varint,3,opt,name=secondsInThePast,proto3" json:"secondsInThePast,omitempty"`
	// Either the cookie, registrationId or this Q-Token must be set to be authorized for the API call.
	QToken string `protobuf:"bytes,4,opt,name=qToken,proto3" json:"qToken,omitempty"`
	// Either this cookie, registrationId or the Q-Token must be set to be authorized for the API call.
	Token string `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *ScaleGetRequest) Reset() {
	*x = ScaleGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_default_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScaleGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScaleGetRequest) ProtoMessage() {}

func (x *ScaleGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_default_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScaleGetRequest.ProtoReflect.Descriptor instead.
func (*ScaleGetRequest) Descriptor() ([]byte, []int) {
	return file_services_default_service_proto_rawDescGZIP(), []int{13}
}

func (x *ScaleGetRequest) GetBhiveId() string {
	if x != nil {
		return x.BhiveId
	}
	return ""
}

func (x *ScaleGetRequest) GetEpoch() int64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *ScaleGetRequest) GetSecondsInThePast() int64 {
	if x != nil {
		return x.SecondsInThePast
	}
	return 0
}

func (x *ScaleGetRequest) GetQToken() string {
	if x != nil {
		return x.QToken
	}
	return ""
}

func (x *ScaleGetRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ScaleGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*models.Weight `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ScaleGetResponse) Reset() {
	*x = ScaleGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_default_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScaleGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScaleGetResponse) ProtoMessage() {}

func (x *ScaleGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_default_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScaleGetResponse.ProtoReflect.Descriptor instead.
func (*ScaleGetResponse) Descriptor() ([]byte, []int) {
	return file_services_default_service_proto_rawDescGZIP(), []int{14}
}

func (x *ScaleGetResponse) GetData() []*models.Weight {
	if x != nil {
		return x.Data
	}
	return nil
}

type ScaleGetV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Unix Time (epoch) that defines the end time of the scale measurements. The beginning is defined by the secondsInThePast parameter.
	Epoch int64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// How many seconds we go to the past to get the data measurements.
	SecondsInThePast int64 `protobuf:"varint,2,opt,name=secondsInThePast,proto3" json:"secondsInThePast,omitempty"`
	// Either the cookie, registrationId or this Q-Token must be set to be authorized for the API call.
	QToken string `protobuf:"bytes,3,opt,name=qToken,proto3" json:"qToken,omitempty"`
	// Either this cookie, registrationId or the Q-Token must be set to be authorized for the API call.
	Token string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	// The Hive UUID - can be used instead of the Mac Adress if you want to query an associated hive. Either this field or the macAddress are required.
	HiveUuid string `protobuf:"bytes,5,opt,name=hiveUuid,proto3" json:"hiveUuid,omitempty"`
	// The Mac Address of the scale. You can omit this if you use query the hiveUuid.
	MacAddress string `protobuf:"bytes,6,opt,name=macAddress,proto3" json:"macAddress,omitempty"`
	// The User ID. This is used internally and will be overwritten if you send it to the api server. Ignore.
	UserId int64 `protobuf:"varint,7,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *ScaleGetV2Request) Reset() {
	*x = ScaleGetV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_default_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScaleGetV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScaleGetV2Request) ProtoMessage() {}

func (x *ScaleGetV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_services_default_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScaleGetV2Request.ProtoReflect.Descriptor instead.
func (*ScaleGetV2Request) Descriptor() ([]byte, []int) {
	return file_services_default_service_proto_rawDescGZIP(), []int{15}
}

func (x *ScaleGetV2Request) GetEpoch() int64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *ScaleGetV2Request) GetSecondsInThePast() int64 {
	if x != nil {
		return x.SecondsInThePast
	}
	return 0
}

func (x *ScaleGetV2Request) GetQToken() string {
	if x != nil {
		return x.QToken
	}
	return ""
}

func (x *ScaleGetV2Request) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ScaleGetV2Request) GetHiveUuid() string {
	if x != nil {
		return x.HiveUuid
	}
	return ""
}

func (x *ScaleGetV2Request) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *ScaleGetV2Request) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type ScalePostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Either the cookie, the registrationId or this Q-Token must be set to be authorized for the API call.
	RegistrationId string `protobuf:"bytes,1,opt,name=registrationId,proto3" json:"registrationId,omitempty"`
	// Either the cookie, the registrationId or this Q-Token must be set to be authorized for the API call.
	QToken string `protobuf:"bytes,2,opt,name=qToken,proto3" json:"qToken,omitempty"`
	// Either this cookie or the Q-Token must be set to be authorized for the API call.
	Token string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	// The User ID. This is used internally and will be overwritten if you send it to the api server. Ignore.
	UserId int64          `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`
	Weight *models.Weight `protobuf:"bytes,5,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *ScalePostRequest) Reset() {
	*x = ScalePostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_default_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalePostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalePostRequest) ProtoMessage() {}

func (x *ScalePostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_default_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalePostRequest.ProtoReflect.Descriptor instead.
func (*ScalePostRequest) Descriptor() ([]byte, []int) {
	return file_services_default_service_proto_rawDescGZIP(), []int{16}
}

func (x *ScalePostRequest) GetRegistrationId() string {
	if x != nil {
		return x.RegistrationId
	}
	return ""
}

func (x *ScalePostRequest) GetQToken() string {
	if x != nil {
		return x.QToken
	}
	return ""
}

func (x *ScalePostRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ScalePostRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ScalePostRequest) GetWeight() *models.Weight {
	if x != nil {
		return x.Weight
	}
	return nil
}

type ScalePostV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique registration Id for that scale. The user needs to register it first in the cloud, otherwise we will not accept the data.
	RegistrationId string `protobuf:"bytes,1,opt,name=registrationId,proto3" json:"registrationId,omitempty"`
	// The User ID. This is used internally and will be overwritten if you send it to the api server. Ignore.
	UserId  int64           `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	ScaleV2 *models.ScaleV2 `protobuf:"bytes,3,opt,name=scaleV2,proto3" json:"scaleV2,omitempty"`
}

func (x *ScalePostV2Request) Reset() {
	*x = ScalePostV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_default_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalePostV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalePostV2Request) ProtoMessage() {}

func (x *ScalePostV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_services_default_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalePostV2Request.ProtoReflect.Descriptor instead.
func (*ScalePostV2Request) Descriptor() ([]byte, []int) {
	return file_services_default_service_proto_rawDescGZIP(), []int{17}
}

func (x *ScalePostV2Request) GetRegistrationId() string {
	if x != nil {
		return x.RegistrationId
	}
	return ""
}

func (x *ScalePostV2Request) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ScalePostV2Request) GetScaleV2() *models.ScaleV2 {
	if x != nil {
		return x.ScaleV2
	}
	return nil
}

type StandsDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Either the cookie or this Q-Token must be set to be authorized for the API call.
	QToken string `protobuf:"bytes,1,opt,name=qToken,proto3" json:"qToken,omitempty"`
	// The UUID of the stand.
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Either this cookie or the Q-Token must be set to be authorized for the API call.
	Token string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	// The UserID is set internally and can not set or be overridden with the API request. Please ignore.
	UserId int64 `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *StandsDeleteRequest) Reset() {
	*x = StandsDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_default_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StandsDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandsDeleteRequest) ProtoMessage() {}

func (x *StandsDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_default_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StandsDeleteRequest.ProtoReflect.Descriptor instead.
func (*StandsDeleteRequest) Descriptor() ([]byte, []int) {
	return file_services_default_service_proto_rawDescGZIP(), []int{18}
}

func (x *StandsDeleteRequest) GetQToken() string {
	if x != nil {
		return x.QToken
	}
	return ""
}

func (x *StandsDeleteRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *StandsDeleteRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *StandsDeleteRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type StandsGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Either the cookie or this Q-Token must be set to be authorized for the API call.
	QToken string `protobuf:"bytes,1,opt,name=qToken,proto3" json:"qToken,omitempty"`
	// The Unix Time (epoch) that defines the end time of the query. The beginning is defined by the secondsInThePast parameter. If unset, the epoch will be set to NOW()
	Epoch int64 `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// How many seconds we go to the past to return data versions. If set to zero, we will return exactly one version. If set to non-zero, we will return all results from the past as well, up to 100 values.
	SecondsInThePast int64 `protobuf:"varint,3,opt,name=secondsInThePast,proto3" json:"secondsInThePast,omitempty"`
	// Either this cookie or the Q-Token must be set to be authorized for the API call.
	Token string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	// The UUID of the stand. If not set, the request will return all stands.
	Uuid string `protobuf:"bytes,5,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// The UserID is set internally and can not set or be overridden with the API request. Please ignore.
	UserId int64 `protobuf:"varint,6,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *StandsGetRequest) Reset() {
	*x = StandsGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_default_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StandsGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandsGetRequest) ProtoMessage() {}

func (x *StandsGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_default_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StandsGetRequest.ProtoReflect.Descriptor instead.
func (*StandsGetRequest) Descriptor() ([]byte, []int) {
	return file_services_default_service_proto_rawDescGZIP(), []int{19}
}

func (x *StandsGetRequest) GetQToken() string {
	if x != nil {
		return x.QToken
	}
	return ""
}

func (x *StandsGetRequest) GetEpoch() int64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *StandsGetRequest) GetSecondsInThePast() int64 {
	if x != nil {
		return x.SecondsInThePast
	}
	return 0
}

func (x *StandsGetRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *StandsGetRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *StandsGetRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type StandsPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Either the cookie or this Q-Token must be set to be authorized for the API call.
	QToken string `protobuf:"bytes,1,opt,name=qToken,proto3" json:"qToken,omitempty"`
	// Either this cookie or the Q-Token must be set to be authorized for the API call.
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// The UserID is set internally and can not set or be overridden with the API request. Please ignore.
	UserId int64         `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	Stand  *models.Stand `protobuf:"bytes,4,opt,name=stand,proto3" json:"stand,omitempty"`
}

func (x *StandsPostRequest) Reset() {
	*x = StandsPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_default_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StandsPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandsPostRequest) ProtoMessage() {}

func (x *StandsPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_default_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StandsPostRequest.ProtoReflect.Descriptor instead.
func (*StandsPostRequest) Descriptor() ([]byte, []int) {
	return file_services_default_service_proto_rawDescGZIP(), []int{20}
}

func (x *StandsPostRequest) GetQToken() string {
	if x != nil {
		return x.QToken
	}
	return ""
}

func (x *StandsPostRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *StandsPostRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *StandsPostRequest) GetStand() *models.Stand {
	if x != nil {
		return x.Stand
	}
	return nil
}

type StandsPutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Either the cookie or this Q-Token must be set to be authorized for the API call.
	QToken string `protobuf:"bytes,1,opt,name=qToken,proto3" json:"qToken,omitempty"`
	// Either this cookie or the Q-Token must be set to be authorized for the API call.
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// The UserID is set internally and can not set or be overridden with the API request. Please ignore.
	UserId int64         `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	Stand  *models.Stand `protobuf:"bytes,4,opt,name=stand,proto3" json:"stand,omitempty"`
}

func (x *StandsPutRequest) Reset() {
	*x = StandsPutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_default_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StandsPutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandsPutRequest) ProtoMessage() {}

func (x *StandsPutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_default_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StandsPutRequest.ProtoReflect.Descriptor instead.
func (*StandsPutRequest) Descriptor() ([]byte, []int) {
	return file_services_default_service_proto_rawDescGZIP(), []int{21}
}

func (x *StandsPutRequest) GetQToken() string {
	if x != nil {
		return x.QToken
	}
	return ""
}

func (x *StandsPutRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *StandsPutRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *StandsPutRequest) GetStand() *models.Stand {
	if x != nil {
		return x.Stand
	}
	return nil
}

type TemperatureGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Either the cookie or this Q-Token must be set to be authorized for the API call.
	QToken string `protobuf:"bytes,1,opt,name=qToken,proto3" json:"qToken,omitempty"`
	// The Mac Address of the QBox client. You can get all QBox IDs and clients with the /config API call.
	BhiveId string `protobuf:"bytes,2,opt,name=bhiveId,proto3" json:"bhiveId,omitempty"`
	// The Unix Time (epoch) that defines the end time of the scale measurements. The beginning is defined by the secondsInThePast parameter.
	Epoch int64 `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// How many seconds we go to the past to get the data measurements.
	SecondsInThePast int64 `protobuf:"varint,4,opt,name=secondsInThePast,proto3" json:"secondsInThePast,omitempty"`
	// Either this cookie or the Q-Token must be set to be authorized for the API call.
	Token string `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
	// The User ID. This is used internally and will be overwritten if you send it to the api server. Ignore.
	UserId int64 `protobuf:"varint,6,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *TemperatureGetRequest) Reset() {
	*x = TemperatureGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_default_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemperatureGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemperatureGetRequest) ProtoMessage() {}

func (x *TemperatureGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_default_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemperatureGetRequest.ProtoReflect.Descriptor instead.
func (*TemperatureGetRequest) Descriptor() ([]byte, []int) {
	return file_services_default_service_proto_rawDescGZIP(), []int{22}
}

func (x *TemperatureGetRequest) GetQToken() string {
	if x != nil {
		return x.QToken
	}
	return ""
}

func (x *TemperatureGetRequest) GetBhiveId() string {
	if x != nil {
		return x.BhiveId
	}
	return ""
}

func (x *TemperatureGetRequest) GetEpoch() int64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *TemperatureGetRequest) GetSecondsInThePast() int64 {
	if x != nil {
		return x.SecondsInThePast
	}
	return 0
}

func (x *TemperatureGetRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TemperatureGetRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type TemperaturePostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The User ID. This is used internally and will be overwritten if you send it to the api server. Ignore.
	UserId      int64               `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Temperature *models.Temperature `protobuf:"bytes,2,opt,name=temperature,proto3" json:"temperature,omitempty"`
}

func (x *TemperaturePostRequest) Reset() {
	*x = TemperaturePostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_default_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemperaturePostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemperaturePostRequest) ProtoMessage() {}

func (x *TemperaturePostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_default_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemperaturePostRequest.ProtoReflect.Descriptor instead.
func (*TemperaturePostRequest) Descriptor() ([]byte, []int) {
	return file_services_default_service_proto_rawDescGZIP(), []int{23}
}

func (x *TemperaturePostRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TemperaturePostRequest) GetTemperature() *models.Temperature {
	if x != nil {
		return x.Temperature
	}
	return nil
}

type UserPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *models.User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *UserPostRequest) Reset() {
	*x = UserPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_default_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPostRequest) ProtoMessage() {}

func (x *UserPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_default_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPostRequest.ProtoReflect.Descriptor instead.
func (*UserPostRequest) Descriptor() ([]byte, []int) {
	return file_services_default_service_proto_rawDescGZIP(), []int{24}
}

func (x *UserPostRequest) GetUser() *models.User {
	if x != nil {
		return x.User
	}
	return nil
}

type VarroaScanGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Either the cookie or this Q-Token must be set to be authorized for the API call.
	QToken string `protobuf:"bytes,1,opt,name=qToken,proto3" json:"qToken,omitempty"`
	// The Mac Address of the QBox client. You can get all QBox IDs and clients with the /config API call.
	BhiveId string `protobuf:"bytes,2,opt,name=bhiveId,proto3" json:"bhiveId,omitempty"`
	// Either this cookie or the Q-Token must be set to be authorized for the API call.
	Token string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	// The Unix Time (epoch) that defines the end time of the varroa images. The beginning is defined by the secondsInThePast parameter.
	Epoch int64 `protobuf:"varint,4,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// The UUID of the varra-scan. If not set, the request will return scans in the given time range. If this parameter is given we ignore all time ranges. This is currently not implemented.
	Uuid string `protobuf:"bytes,5,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// The User ID. This is used internally and will be overwritten if you send it to the api server. Ignore.
	UserId int64 `protobuf:"varint,6,opt,name=userId,proto3" json:"userId,omitempty"`
	// How many seconds we go to the past to get the data measurements.
	SecondsInThePast int64 `protobuf:"varint,7,opt,name=secondsInThePast,proto3" json:"secondsInThePast,omitempty"`
}

func (x *VarroaScanGetRequest) Reset() {
	*x = VarroaScanGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_default_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VarroaScanGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VarroaScanGetRequest) ProtoMessage() {}

func (x *VarroaScanGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_default_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VarroaScanGetRequest.ProtoReflect.Descriptor instead.
func (*VarroaScanGetRequest) Descriptor() ([]byte, []int) {
	return file_services_default_service_proto_rawDescGZIP(), []int{25}
}

func (x *VarroaScanGetRequest) GetQToken() string {
	if x != nil {
		return x.QToken
	}
	return ""
}

func (x *VarroaScanGetRequest) GetBhiveId() string {
	if x != nil {
		return x.BhiveId
	}
	return ""
}

func (x *VarroaScanGetRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *VarroaScanGetRequest) GetEpoch() int64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *VarroaScanGetRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *VarroaScanGetRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *VarroaScanGetRequest) GetSecondsInThePast() int64 {
	if x != nil {
		return x.SecondsInThePast
	}
	return 0
}

type VarroaScanImagePostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Either the cookie or this Q-Token must be set to be authorized for the API call.
	QToken string `protobuf:"bytes,1,opt,name=qToken,proto3" json:"qToken,omitempty"`
	// Either this cookie or the Q-Token must be set to be authorized for the API call.
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// the internal user id of the authenticated user. Will be set internally in the cloud system and does not have an effect if set via the API call as it will be overridden. Don't set this value.
	UserId int64 `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	// The Mac Address of the QBox client. You can get all QBox IDs and clients with the /config API call.
	BhiveId string `protobuf:"bytes,4,opt,name=bhiveId,proto3" json:"bhiveId,omitempty"`
	// The Unix Time (epoch) that defines the end time of the varroa images. The beginning is defined by the secondsInThePast parameter.
	Epoch int64  `protobuf:"varint,5,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Scan  []byte `protobuf:"bytes,6,opt,name=scan,proto3" json:"scan,omitempty"`
}

func (x *VarroaScanImagePostRequest) Reset() {
	*x = VarroaScanImagePostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_default_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VarroaScanImagePostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VarroaScanImagePostRequest) ProtoMessage() {}

func (x *VarroaScanImagePostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_default_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VarroaScanImagePostRequest.ProtoReflect.Descriptor instead.
func (*VarroaScanImagePostRequest) Descriptor() ([]byte, []int) {
	return file_services_default_service_proto_rawDescGZIP(), []int{26}
}

func (x *VarroaScanImagePostRequest) GetQToken() string {
	if x != nil {
		return x.QToken
	}
	return ""
}

func (x *VarroaScanImagePostRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *VarroaScanImagePostRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *VarroaScanImagePostRequest) GetBhiveId() string {
	if x != nil {
		return x.BhiveId
	}
	return ""
}

func (x *VarroaScanImagePostRequest) GetEpoch() int64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *VarroaScanImagePostRequest) GetScan() []byte {
	if x != nil {
		return x.Scan
	}
	return nil
}

type VarroaScanPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The User ID. This is used internally and will be overwritten if you send it to the api server. Ignore.
	UserId     int64              `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	VarroaScan *models.VarroaScan `protobuf:"bytes,2,opt,name=varroaScan,proto3" json:"varroaScan,omitempty"`
}

func (x *VarroaScanPostRequest) Reset() {
	*x = VarroaScanPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_default_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VarroaScanPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VarroaScanPostRequest) ProtoMessage() {}

func (x *VarroaScanPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_default_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VarroaScanPostRequest.ProtoReflect.Descriptor instead.
func (*VarroaScanPostRequest) Descriptor() ([]byte, []int) {
	return file_services_default_service_proto_rawDescGZIP(), []int{27}
}

func (x *VarroaScanPostRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *VarroaScanPostRequest) GetVarroaScan() *models.VarroaScan {
	if x != nil {
		return x.VarroaScan
	}
	return nil
}

var File_services_default_service_proto protoreflect.FileDescriptor

var file_services_default_service_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f,
	0x62, 0x62, 0x6f, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2f, 0x62, 0x62, 0x6f, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x70, 0x6f,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x62,
	0x6f, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x69,
	0x76, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x67, 0x65, 0x74,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2f, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x62, 0x62,
	0x6f, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x68,
	0x69, 0x76, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x70, 0x6f, 0x73, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x70,
	0x75, 0x74, 0x5f, 0x62, 0x62, 0x6f, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x70,
	0x75, 0x74, 0x5f, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x70,
	0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x5f, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x76, 0x32, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x18, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x76, 0x61, 0x72, 0x72, 0x6f, 0x61, 0x5f, 0x73, 0x63, 0x61,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f,
	0x76, 0x61, 0x72, 0x72, 0x6f, 0x61, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x68, 0x0a, 0x25, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x50, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x11, 0x42, 0x62, 0x6f,
	0x78, 0x65, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x62, 0x6f, 0x78, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x6d, 0x0a, 0x1f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x42, 0x62, 0x6f, 0x78,
	0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x62, 0x6f, 0x78, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x62, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x68, 0x69, 0x76, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x69, 0x76, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x74, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x42, 0x62, 0x6f, 0x78, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x71, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x71, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x42, 0x62, 0x6f, 0x78, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x71, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x71, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x16, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x42, 0x62, 0x6f, 0x78, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x62, 0x62,
	0x6f, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x2e, 0x42, 0x62, 0x6f, 0x78, 0x52, 0x04, 0x62, 0x62, 0x6f, 0x78, 0x22, 0x94, 0x01,
	0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x42, 0x62, 0x6f, 0x78, 0x50, 0x75, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x04, 0x62, 0x62, 0x6f, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x62, 0x6f, 0x78, 0x52, 0x04,
	0x62, 0x62, 0x6f, 0x78, 0x22, 0x83, 0x01, 0x0a, 0x1e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x42, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x62, 0x62, 0x6f, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e,
	0x42, 0x62, 0x6f, 0x78, 0x52, 0x04, 0x62, 0x62, 0x6f, 0x78, 0x22, 0x6e, 0x0a, 0x12, 0x48, 0x69,
	0x76, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x71, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x71, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x7f, 0x0a, 0x0f, 0x48, 0x69,
	0x76, 0x65, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x49, 0x6e,
	0x54, 0x68, 0x65, 0x50, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x54, 0x68, 0x65, 0x50, 0x61, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x7b, 0x0a, 0x10, 0x48,
	0x69, 0x76, 0x65, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x71, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x71, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x68, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x69,
	0x76, 0x65, 0x52, 0x04, 0x68, 0x69, 0x76, 0x65, 0x22, 0x7a, 0x0a, 0x0f, 0x48, 0x69, 0x76, 0x65,
	0x73, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x71,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x04, 0x68, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x69, 0x76, 0x65, 0x52, 0x04,
	0x68, 0x69, 0x76, 0x65, 0x22, 0x4a, 0x0a, 0x10, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x22, 0x9b, 0x01, 0x0a, 0x0f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x68, 0x69, 0x76, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x68, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x49,
	0x6e, 0x54, 0x68, 0x65, 0x50, 0x61, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x54, 0x68, 0x65, 0x50, 0x61, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x71, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x71, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x37,
	0x0a, 0x10, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd7, 0x01, 0x0a, 0x11, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x47, 0x65, 0x74, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x49, 0x6e,
	0x54, 0x68, 0x65, 0x50, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x54, 0x68, 0x65, 0x50, 0x61, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x71, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x71, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x68, 0x69, 0x76, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x68, 0x69, 0x76, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0xa9, 0x01, 0x0a, 0x10, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x71, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x71, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x80, 0x01,
	0x0a, 0x12, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x56, 0x32, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x07, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x56, 0x32, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x56, 0x32, 0x52, 0x07, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x56, 0x32,
	0x22, 0x6f, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0xae, 0x01, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x73, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x49,
	0x6e, 0x54, 0x68, 0x65, 0x50, 0x61, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x54, 0x68, 0x65, 0x50, 0x61, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x7f, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x73, 0x50, 0x6f, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x22, 0x7e, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x73, 0x50, 0x75, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x22, 0xb9, 0x01, 0x0a, 0x15, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x71, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x68, 0x69, 0x76, 0x65, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x68, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x49, 0x6e, 0x54, 0x68, 0x65, 0x50, 0x61, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x54, 0x68, 0x65, 0x50, 0x61, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x68, 0x0a, 0x16, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x36, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0b, 0x74, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x34, 0x0a, 0x0f, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22,
	0xcc, 0x01, 0x0a, 0x14, 0x56, 0x61, 0x72, 0x72, 0x6f, 0x61, 0x53, 0x63, 0x61, 0x6e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x68, 0x69, 0x76, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x62, 0x68, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x54,
	0x68, 0x65, 0x50, 0x61, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x54, 0x68, 0x65, 0x50, 0x61, 0x73, 0x74, 0x22, 0xa6,
	0x01, 0x0a, 0x1a, 0x56, 0x61, 0x72, 0x72, 0x6f, 0x61, 0x53, 0x63, 0x61, 0x6e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x71, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x68, 0x69, 0x76, 0x65, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x68, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x63, 0x61, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x73, 0x63, 0x61, 0x6e, 0x22, 0x64, 0x0a, 0x15, 0x56, 0x61, 0x72, 0x72, 0x6f,
	0x61, 0x53, 0x63, 0x61, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x0a, 0x76, 0x61, 0x72, 0x72,
	0x6f, 0x61, 0x53, 0x63, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x61, 0x72, 0x72, 0x6f, 0x61, 0x53, 0x63, 0x61,
	0x6e, 0x52, 0x0a, 0x76, 0x61, 0x72, 0x72, 0x6f, 0x61, 0x53, 0x63, 0x61, 0x6e, 0x32, 0xa7, 0x15,
	0x0a, 0x0e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x8b, 0x01, 0x0a, 0x1e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x50,
	0x6f, 0x73, 0x74, 0x12, 0x46, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57,
	0x0a, 0x09, 0x42, 0x62, 0x6f, 0x78, 0x65, 0x73, 0x47, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x62, 0x6f, 0x78, 0x65, 0x73, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x42, 0x62, 0x6f, 0x78, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x73, 0x74, 0x12, 0x40, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x42, 0x62, 0x6f,
	0x78, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x42, 0x62,
	0x6f, 0x78, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x42, 0x62, 0x6f, 0x78, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x62, 0x0a, 0x0e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x42, 0x62, 0x6f, 0x78, 0x47, 0x65, 0x74, 0x12, 0x36, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x42, 0x62, 0x6f, 0x78, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x65, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x42, 0x62, 0x6f, 0x78, 0x50, 0x6f,
	0x73, 0x74, 0x12, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x42, 0x62, 0x6f, 0x78,
	0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x42, 0x62, 0x6f, 0x78, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x42, 0x62, 0x6f, 0x78, 0x50, 0x75, 0x74, 0x12, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x42, 0x62, 0x6f, 0x78, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x75, 0x74, 0x42, 0x62,
	0x6f, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x17, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x42, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x3f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x42,
	0x62, 0x6f, 0x78, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x2e, 0x42, 0x62, 0x6f, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0b, 0x48, 0x69, 0x76, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x69, 0x76, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x57, 0x0a, 0x08, 0x48, 0x69, 0x76, 0x65, 0x73, 0x47, 0x65, 0x74, 0x12, 0x30, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x69,
	0x76, 0x65, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x69, 0x76, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x09, 0x48, 0x69, 0x76, 0x65,
	0x73, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x69, 0x76, 0x65, 0x73, 0x50, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x48, 0x69, 0x76, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x08, 0x48, 0x69, 0x76, 0x65, 0x73, 0x50, 0x75, 0x74,
	0x12, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x48, 0x69, 0x76, 0x65, 0x73, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x75, 0x74,
	0x48, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x09,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x08, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x47, 0x65, 0x74, 0x12, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0a, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x47, 0x65, 0x74, 0x56, 0x32, 0x12, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x47,
	0x65, 0x74, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x56, 0x32, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x09, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x6f,
	0x73, 0x74, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x0b, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x74,
	0x56, 0x32, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x56, 0x32,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x73, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x5a, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x73, 0x47, 0x65, 0x74,
	0x12, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5d, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x32, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59,
	0x0a, 0x09, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x73, 0x50, 0x75, 0x74, 0x12, 0x31, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x73, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x75, 0x74, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x0e, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x47, 0x65, 0x74, 0x12, 0x36, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x0f, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54,
	0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x30, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x63, 0x0a, 0x0d, 0x56, 0x61, 0x72, 0x72, 0x6f, 0x61, 0x53, 0x63,
	0x61, 0x6e, 0x47, 0x65, 0x74, 0x12, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x72, 0x6f, 0x61, 0x53, 0x63,
	0x61, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x61, 0x72, 0x72, 0x6f, 0x61, 0x53, 0x63, 0x61,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x13, 0x56, 0x61, 0x72,
	0x72, 0x6f, 0x61, 0x53, 0x63, 0x61, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x74,
	0x12, 0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x72, 0x6f, 0x61, 0x53, 0x63, 0x61, 0x6e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x60, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x72, 0x6f, 0x61, 0x53,
	0x63, 0x61, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x72, 0x6f, 0x61,
	0x53, 0x63, 0x61, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x01, 0x50, 0x02, 0x50, 0x03, 0x50, 0x04, 0x50,
	0x05, 0x50, 0x06, 0x50, 0x07, 0x50, 0x08, 0x50, 0x09, 0x50, 0x0a, 0x50, 0x0b, 0x50, 0x0c, 0x50,
	0x0d, 0x50, 0x0e, 0x50, 0x0f, 0x50, 0x10, 0x50, 0x11, 0x50, 0x12, 0x50, 0x13, 0x50, 0x14, 0x50,
	0x15, 0x50, 0x16, 0x50, 0x17, 0x50, 0x18, 0x50, 0x19, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_services_default_service_proto_rawDescOnce sync.Once
	file_services_default_service_proto_rawDescData = file_services_default_service_proto_rawDesc
)

func file_services_default_service_proto_rawDescGZIP() []byte {
	file_services_default_service_proto_rawDescOnce.Do(func() {
		file_services_default_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_default_service_proto_rawDescData)
	})
	return file_services_default_service_proto_rawDescData
}

var file_services_default_service_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_services_default_service_proto_goTypes = []interface{}{
	(*AuthenticateRegistrationIdPostRequest)(nil), // 0: openapi.services.defaultservice.AuthenticateRegistrationIdPostRequest
	(*BboxesGetResponse)(nil),                     // 1: openapi.services.defaultservice.BboxesGetResponse
	(*ConfigsBboxAssociatePostRequest)(nil),       // 2: openapi.services.defaultservice.ConfigsBboxAssociatePostRequest
	(*ConfigsBboxDeleteRequest)(nil),              // 3: openapi.services.defaultservice.ConfigsBboxDeleteRequest
	(*ConfigsBboxGetRequest)(nil),                 // 4: openapi.services.defaultservice.ConfigsBboxGetRequest
	(*ConfigsBboxPostRequest)(nil),                // 5: openapi.services.defaultservice.ConfigsBboxPostRequest
	(*ConfigsBboxPutRequest)(nil),                 // 6: openapi.services.defaultservice.ConfigsBboxPutRequest
	(*ConfigsBboxRegisterPostRequest)(nil),        // 7: openapi.services.defaultservice.ConfigsBboxRegisterPostRequest
	(*HivesDeleteRequest)(nil),                    // 8: openapi.services.defaultservice.HivesDeleteRequest
	(*HivesGetRequest)(nil),                       // 9: openapi.services.defaultservice.HivesGetRequest
	(*HivesPostRequest)(nil),                      // 10: openapi.services.defaultservice.HivesPostRequest
	(*HivesPutRequest)(nil),                       // 11: openapi.services.defaultservice.HivesPutRequest
	(*LoginPostRequest)(nil),                      // 12: openapi.services.defaultservice.LoginPostRequest
	(*ScaleGetRequest)(nil),                       // 13: openapi.services.defaultservice.ScaleGetRequest
	(*ScaleGetResponse)(nil),                      // 14: openapi.services.defaultservice.ScaleGetResponse
	(*ScaleGetV2Request)(nil),                     // 15: openapi.services.defaultservice.ScaleGetV2Request
	(*ScalePostRequest)(nil),                      // 16: openapi.services.defaultservice.ScalePostRequest
	(*ScalePostV2Request)(nil),                    // 17: openapi.services.defaultservice.ScalePostV2Request
	(*StandsDeleteRequest)(nil),                   // 18: openapi.services.defaultservice.StandsDeleteRequest
	(*StandsGetRequest)(nil),                      // 19: openapi.services.defaultservice.StandsGetRequest
	(*StandsPostRequest)(nil),                     // 20: openapi.services.defaultservice.StandsPostRequest
	(*StandsPutRequest)(nil),                      // 21: openapi.services.defaultservice.StandsPutRequest
	(*TemperatureGetRequest)(nil),                 // 22: openapi.services.defaultservice.TemperatureGetRequest
	(*TemperaturePostRequest)(nil),                // 23: openapi.services.defaultservice.TemperaturePostRequest
	(*UserPostRequest)(nil),                       // 24: openapi.services.defaultservice.UserPostRequest
	(*VarroaScanGetRequest)(nil),                  // 25: openapi.services.defaultservice.VarroaScanGetRequest
	(*VarroaScanImagePostRequest)(nil),            // 26: openapi.services.defaultservice.VarroaScanImagePostRequest
	(*VarroaScanPostRequest)(nil),                 // 27: openapi.services.defaultservice.VarroaScanPostRequest
	(*models.RegistrationId)(nil),                 // 28: openapi.RegistrationId
	(*models.Bbox)(nil),                           // 29: openapi.Bbox
	(*models.Hive)(nil),                           // 30: openapi.Hive
	(*models.Weight)(nil),                         // 31: openapi.Weight
	(*models.ScaleV2)(nil),                        // 32: openapi.ScaleV2
	(*models.Stand)(nil),                          // 33: openapi.Stand
	(*models.Temperature)(nil),                    // 34: openapi.Temperature
	(*models.User)(nil),                           // 35: openapi.User
	(*models.VarroaScan)(nil),                     // 36: openapi.VarroaScan
	(*emptypb.Empty)(nil),                         // 37: google.protobuf.Empty
	(*models.AuthenticatePostResponse)(nil),       // 38: openapi.AuthenticatePostResponse
	(*models.GenericPostResponse)(nil),            // 39: openapi.GenericPostResponse
	(*models.GetBboxResponse)(nil),                // 40: openapi.GetBboxResponse
	(*models.PostBboxResponse)(nil),               // 41: openapi.PostBboxResponse
	(*models.PutBboxResponse)(nil),                // 42: openapi.PutBboxResponse
	(*models.BboxConfigResponse)(nil),             // 43: openapi.BboxConfigResponse
	(*models.GetHivesResponse)(nil),               // 44: openapi.GetHivesResponse
	(*models.PostHivesResponse)(nil),              // 45: openapi.PostHivesResponse
	(*models.PutHiveResponse)(nil),                // 46: openapi.PutHiveResponse
	(*models.LoginPostResponse)(nil),              // 47: openapi.LoginPostResponse
	(*models.ScaleV2Response)(nil),                // 48: openapi.ScaleV2Response
	(*models.GetStandsResponse)(nil),              // 49: openapi.GetStandsResponse
	(*models.PostStandsResponse)(nil),             // 50: openapi.PostStandsResponse
	(*models.PutStandResponse)(nil),               // 51: openapi.PutStandResponse
	(*models.GetTemperatureResponse)(nil),         // 52: openapi.GetTemperatureResponse
	(*models.VarroaScanResponse)(nil),             // 53: openapi.VarroaScanResponse
}
var file_services_default_service_proto_depIdxs = []int32{
	28, // 0: openapi.services.defaultservice.AuthenticateRegistrationIdPostRequest.registrationId:type_name -> openapi.RegistrationId
	29, // 1: openapi.services.defaultservice.BboxesGetResponse.data:type_name -> openapi.Bbox
	29, // 2: openapi.services.defaultservice.ConfigsBboxPostRequest.bbox:type_name -> openapi.Bbox
	29, // 3: openapi.services.defaultservice.ConfigsBboxPutRequest.bbox:type_name -> openapi.Bbox
	29, // 4: openapi.services.defaultservice.ConfigsBboxRegisterPostRequest.bbox:type_name -> openapi.Bbox
	30, // 5: openapi.services.defaultservice.HivesPostRequest.hive:type_name -> openapi.Hive
	30, // 6: openapi.services.defaultservice.HivesPutRequest.hive:type_name -> openapi.Hive
	31, // 7: openapi.services.defaultservice.ScaleGetResponse.data:type_name -> openapi.Weight
	31, // 8: openapi.services.defaultservice.ScalePostRequest.weight:type_name -> openapi.Weight
	32, // 9: openapi.services.defaultservice.ScalePostV2Request.scaleV2:type_name -> openapi.ScaleV2
	33, // 10: openapi.services.defaultservice.StandsPostRequest.stand:type_name -> openapi.Stand
	33, // 11: openapi.services.defaultservice.StandsPutRequest.stand:type_name -> openapi.Stand
	34, // 12: openapi.services.defaultservice.TemperaturePostRequest.temperature:type_name -> openapi.Temperature
	35, // 13: openapi.services.defaultservice.UserPostRequest.user:type_name -> openapi.User
	36, // 14: openapi.services.defaultservice.VarroaScanPostRequest.varroaScan:type_name -> openapi.VarroaScan
	0,  // 15: openapi.services.defaultservice.DefaultService.AuthenticateRegistrationIdPost:input_type -> openapi.services.defaultservice.AuthenticateRegistrationIdPostRequest
	37, // 16: openapi.services.defaultservice.DefaultService.BboxesGet:input_type -> google.protobuf.Empty
	2,  // 17: openapi.services.defaultservice.DefaultService.ConfigsBboxAssociatePost:input_type -> openapi.services.defaultservice.ConfigsBboxAssociatePostRequest
	3,  // 18: openapi.services.defaultservice.DefaultService.ConfigsBboxDelete:input_type -> openapi.services.defaultservice.ConfigsBboxDeleteRequest
	4,  // 19: openapi.services.defaultservice.DefaultService.ConfigsBboxGet:input_type -> openapi.services.defaultservice.ConfigsBboxGetRequest
	5,  // 20: openapi.services.defaultservice.DefaultService.ConfigsBboxPost:input_type -> openapi.services.defaultservice.ConfigsBboxPostRequest
	6,  // 21: openapi.services.defaultservice.DefaultService.ConfigsBboxPut:input_type -> openapi.services.defaultservice.ConfigsBboxPutRequest
	7,  // 22: openapi.services.defaultservice.DefaultService.ConfigsBboxRegisterPost:input_type -> openapi.services.defaultservice.ConfigsBboxRegisterPostRequest
	8,  // 23: openapi.services.defaultservice.DefaultService.HivesDelete:input_type -> openapi.services.defaultservice.HivesDeleteRequest
	9,  // 24: openapi.services.defaultservice.DefaultService.HivesGet:input_type -> openapi.services.defaultservice.HivesGetRequest
	10, // 25: openapi.services.defaultservice.DefaultService.HivesPost:input_type -> openapi.services.defaultservice.HivesPostRequest
	11, // 26: openapi.services.defaultservice.DefaultService.HivesPut:input_type -> openapi.services.defaultservice.HivesPutRequest
	12, // 27: openapi.services.defaultservice.DefaultService.LoginPost:input_type -> openapi.services.defaultservice.LoginPostRequest
	13, // 28: openapi.services.defaultservice.DefaultService.ScaleGet:input_type -> openapi.services.defaultservice.ScaleGetRequest
	15, // 29: openapi.services.defaultservice.DefaultService.ScaleGetV2:input_type -> openapi.services.defaultservice.ScaleGetV2Request
	16, // 30: openapi.services.defaultservice.DefaultService.ScalePost:input_type -> openapi.services.defaultservice.ScalePostRequest
	17, // 31: openapi.services.defaultservice.DefaultService.ScalePostV2:input_type -> openapi.services.defaultservice.ScalePostV2Request
	18, // 32: openapi.services.defaultservice.DefaultService.StandsDelete:input_type -> openapi.services.defaultservice.StandsDeleteRequest
	19, // 33: openapi.services.defaultservice.DefaultService.StandsGet:input_type -> openapi.services.defaultservice.StandsGetRequest
	20, // 34: openapi.services.defaultservice.DefaultService.StandsPost:input_type -> openapi.services.defaultservice.StandsPostRequest
	21, // 35: openapi.services.defaultservice.DefaultService.StandsPut:input_type -> openapi.services.defaultservice.StandsPutRequest
	22, // 36: openapi.services.defaultservice.DefaultService.TemperatureGet:input_type -> openapi.services.defaultservice.TemperatureGetRequest
	23, // 37: openapi.services.defaultservice.DefaultService.TemperaturePost:input_type -> openapi.services.defaultservice.TemperaturePostRequest
	24, // 38: openapi.services.defaultservice.DefaultService.UserPost:input_type -> openapi.services.defaultservice.UserPostRequest
	25, // 39: openapi.services.defaultservice.DefaultService.VarroaScanGet:input_type -> openapi.services.defaultservice.VarroaScanGetRequest
	26, // 40: openapi.services.defaultservice.DefaultService.VarroaScanImagePost:input_type -> openapi.services.defaultservice.VarroaScanImagePostRequest
	27, // 41: openapi.services.defaultservice.DefaultService.VarroaScanPost:input_type -> openapi.services.defaultservice.VarroaScanPostRequest
	38, // 42: openapi.services.defaultservice.DefaultService.AuthenticateRegistrationIdPost:output_type -> openapi.AuthenticatePostResponse
	1,  // 43: openapi.services.defaultservice.DefaultService.BboxesGet:output_type -> openapi.services.defaultservice.BboxesGetResponse
	39, // 44: openapi.services.defaultservice.DefaultService.ConfigsBboxAssociatePost:output_type -> openapi.GenericPostResponse
	37, // 45: openapi.services.defaultservice.DefaultService.ConfigsBboxDelete:output_type -> google.protobuf.Empty
	40, // 46: openapi.services.defaultservice.DefaultService.ConfigsBboxGet:output_type -> openapi.GetBboxResponse
	41, // 47: openapi.services.defaultservice.DefaultService.ConfigsBboxPost:output_type -> openapi.PostBboxResponse
	42, // 48: openapi.services.defaultservice.DefaultService.ConfigsBboxPut:output_type -> openapi.PutBboxResponse
	43, // 49: openapi.services.defaultservice.DefaultService.ConfigsBboxRegisterPost:output_type -> openapi.BboxConfigResponse
	37, // 50: openapi.services.defaultservice.DefaultService.HivesDelete:output_type -> google.protobuf.Empty
	44, // 51: openapi.services.defaultservice.DefaultService.HivesGet:output_type -> openapi.GetHivesResponse
	45, // 52: openapi.services.defaultservice.DefaultService.HivesPost:output_type -> openapi.PostHivesResponse
	46, // 53: openapi.services.defaultservice.DefaultService.HivesPut:output_type -> openapi.PutHiveResponse
	47, // 54: openapi.services.defaultservice.DefaultService.LoginPost:output_type -> openapi.LoginPostResponse
	14, // 55: openapi.services.defaultservice.DefaultService.ScaleGet:output_type -> openapi.services.defaultservice.ScaleGetResponse
	48, // 56: openapi.services.defaultservice.DefaultService.ScaleGetV2:output_type -> openapi.ScaleV2Response
	39, // 57: openapi.services.defaultservice.DefaultService.ScalePost:output_type -> openapi.GenericPostResponse
	39, // 58: openapi.services.defaultservice.DefaultService.ScalePostV2:output_type -> openapi.GenericPostResponse
	37, // 59: openapi.services.defaultservice.DefaultService.StandsDelete:output_type -> google.protobuf.Empty
	49, // 60: openapi.services.defaultservice.DefaultService.StandsGet:output_type -> openapi.GetStandsResponse
	50, // 61: openapi.services.defaultservice.DefaultService.StandsPost:output_type -> openapi.PostStandsResponse
	51, // 62: openapi.services.defaultservice.DefaultService.StandsPut:output_type -> openapi.PutStandResponse
	52, // 63: openapi.services.defaultservice.DefaultService.TemperatureGet:output_type -> openapi.GetTemperatureResponse
	39, // 64: openapi.services.defaultservice.DefaultService.TemperaturePost:output_type -> openapi.GenericPostResponse
	37, // 65: openapi.services.defaultservice.DefaultService.UserPost:output_type -> google.protobuf.Empty
	53, // 66: openapi.services.defaultservice.DefaultService.VarroaScanGet:output_type -> openapi.VarroaScanResponse
	37, // 67: openapi.services.defaultservice.DefaultService.VarroaScanImagePost:output_type -> google.protobuf.Empty
	37, // 68: openapi.services.defaultservice.DefaultService.VarroaScanPost:output_type -> google.protobuf.Empty
	42, // [42:69] is the sub-list for method output_type
	15, // [15:42] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_services_default_service_proto_init() }
func file_services_default_service_proto_init() {
	if File_services_default_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_services_default_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticateRegistrationIdPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_default_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BboxesGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_default_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigsBboxAssociatePostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_default_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigsBboxDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_default_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigsBboxGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_default_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigsBboxPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_default_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigsBboxPutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_default_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigsBboxRegisterPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_default_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HivesDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_default_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HivesGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_default_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HivesPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_default_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HivesPutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_default_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_default_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScaleGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_default_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScaleGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_default_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScaleGetV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_default_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalePostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_default_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalePostV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_default_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StandsDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_default_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StandsGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_default_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StandsPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_default_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StandsPutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_default_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemperatureGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_default_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemperaturePostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_default_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_default_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VarroaScanGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_default_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VarroaScanImagePostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_default_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VarroaScanPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_default_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_default_service_proto_goTypes,
		DependencyIndexes: file_services_default_service_proto_depIdxs,
		MessageInfos:      file_services_default_service_proto_msgTypes,
	}.Build()
	File_services_default_service_proto = out.File
	file_services_default_service_proto_rawDesc = nil
	file_services_default_service_proto_goTypes = nil
	file_services_default_service_proto_depIdxs = nil
}
