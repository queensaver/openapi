openapi: 3.0.0
info:
  title: Queensaver API
  version: 0.0.1
  description: Queensaver API to send in sensor data and retrieve it. It's also used for user management.

servers:
- url: https://api.queensaver.com
  description: Queensaver API Server

security:
- cookieAuth: []

paths: 

  /v1/user:
    post:
      summary: Create a user 
      operationId: userPost
      description: This call creates a user in the queensaver system.
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user"
      responses:
        "200":
          description: "OK"
        "400":
          description: The provided parameters are incorrect
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorMessage"
              examples:
                missingData:
                  value: "Data is missing."

  /v1/login:
    post:
      summary: Authenticate a user against the system.
      description: This call is meant for interactive web applications. Be aware that the server returns a cookie with a 24 hour lifetime. 
      operationId: loginPost
      security: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/login"
      responses:
        "200":
          description: "Returns a cookie to the browser with the key called 'token'"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/login-post-response"

          headers:
            "SetCookie":
              schema:
                type: string
                example: token=abcde12345; Path=/; HttpOnly
                description: sets the cookie

        "400":
          description: The provided parameters are incorrect
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorMessage"

  /v1/configs/bbox:
    get:
      summary: Get Config metadata of bboxes
      description: This returns all bboxes of a user
      operationId: configsBboxGet
      security:
      - cookieAuth: []
      parameters:
      - in: header
        name: Q-Token
        description: Either the cookie or this Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
        required: true
      - in: cookie
        name: token
        description: Either this cookie or the Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
      - name: uuid
        in: query
        description: The UUID of the bbox. If not set, the request will return all bboxes.
        required: false
        example: 41C0FE2F-EB0C-45B4-8842-C117E47C35E3
        schema:
          type: string
      - name: userId
        in: query
        description: The UserID is set internally and can not set or be overridden with the API request. Please ignore.
        required: false
        example: 1234
        schema:
          type: integer
          format: int64

      responses:
        "200":
          description: "bboxes"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get-bbox-response"
        "400":
          description: Client error
        "500":
          description: Internal error

    put:
      summary: Update bbox metadata
      description: This call updates bbox metadata
      operationId: configsBboxPut
      security:
      - cookieAuth: []
      parameters:
      - in: header
        name: Q-Token
        description: Either the cookie or this Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
        required: true
      - in: cookie
        name: token
        description: Either this cookie or the Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
      - name: uuid
        in: query
        description: The UUID of the bbox. Required. You can only update one bbox at a time.
        required: true
        example: 41C0FE2F-EB0C-45B4-8842-C117E47C35E3
        schema:
          type: string
      - name: userId
        in: query
        description: The UserID is set internally and can not set or be overridden with the API request. Please ignore.
        required: false
        example: 1234
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/bbox"
      responses:
        "201":
          description: "Returns the updated bbox"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/put-bbox-response"
        "400":
          description: Client error
        "500":
          description: Internal error


    post:
      summary: Create bbox
      description: This creates a new bbox. A bbox is a physical hardware component that needs to be associated with a hive.
      operationId: configsBboxPost
      security:
      - cookieAuth: []
      parameters:
      - in: header
        name: Q-Token
        description: Either the cookie or this Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
        required: true
      - in: cookie
        name: token
        description: Either this cookie or the Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
      - name: userId
        in: query
        description: The UserID is set internally and can not set or be overridden with the API request. Please ignore.
        required: false
        example: 1234
        schema:
          type: integer
          format: int64

      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/bbox"
      responses:
        "201":
          description: "Returns the created bbox and the http error code"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/post-bbox-response"
        "400":
          description: Client error
        "500":
          description: Internal error

    delete:
      summary: Delete a bbox
      description: This deletes a bbox.
      operationId: configsBboxDelete
      security:
      - cookieAuth: []
      parameters:
      - in: header
        name: Q-Token
        description: Either the cookie or this Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
        required: true
      - in: cookie
        name: token
        description: Either this cookie or the Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
      - name: userId
        in: query
        description: The UserID is set internally and can not set or be overridden with the API request. Please ignore.
        required: false
        example: 1234
        schema:
          type: integer
          format: int64
      - name: uuid
        in: query
        description: The UUID of the bbox.
        required: true
        example: 41C0FE2F-EB0C-45B4-8842-C117E47C35E3
        schema:
          type: string
      responses:
        "200":
          description: "Returns 200 if the delete was successful"
        "400":
          description: Client error
        "500":
          description: Internal error

  /v1/authenticateRegistrationId:
    post:
      summary: authenticate against the internal authentication service with a registrationId. 
      operationId: authenticateRegistrationIdPost
      description: This can not be called from the API but is an internal call. Please ignore if you consume this API publicly. An authentication call can be either a username or password but also a registrationId. In this call we implement the registrationId.
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/registrationId"
      responses:
        "200":
          description: Authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/authenticate-post-response"
        "400":
          description: Client error
        "500":
          description: Internal error


  /v1/configs/bbox/register:
    post:
      summary: register bbox
      operationId: configsBboxRegisterPost
      description: This registers a new bbox. A bbox is a physical hardware component that needs to be associated with a hive. The bbox sends a registrationId that a user needs to know and put in the system before the registration. The bbox proto is used as a convenience, the only field that is accepted is the bboxId and the registrationId, the hardwareType and that hardwareRevision. 
      parameters:
      - name: userId
        in: query
        description: The UserID is set internally and can not set or be overridden with the API request. Please ignore.
        required: false
        example: 1234
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/bbox"
      responses:
        "200":
          description: "Generic Response object that just returns an HTTP status code"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/bbox-config-response"
        "400":
          description: Client error
        "500":
          description: Internal error

  /v1/configs/bbox/associate:
    post:
      summary: associate bbox and its sensors to a logical hive
      operationId: configsBboxAssociatePost
      description: This connects a bbox with a hive so all telemetry data will be associate with the hive. If the hiveUuid is empty, we disassociate that bhive (it's no longer connected to any hives)
      parameters:
      - name: userId
        in: query
        description: The UserID is set internally and can not set or be overridden with the API request. Please ignore.
        required: false
        example: 1234
        schema:
          type: integer
          format: int64
      - name: bboxId
        in: query
        description: The Mac Address of the bBox.
        required: true
        example: 829898a53801
        schema:
          type: string
      - name: hiveUuid
        in: query
        example: 41C0FE2F-EB0C-45B4-8842-C117E47C35E3
        description: Unique Identifier for this hive
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "OK if the association / disassociation has been made"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/generic-post-response"

        "400":
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/generic-post-response"

        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/generic-post-response"


  /v1/stands:
    get:
      summary: Get Stand metadata
      operationId: standsGet
      description: This returns all hive stand for the currently logged in user. Important to understand is that a user can go back into the past at any point in time (how did my stand look like a month or a year ago), so the cloud stores multiple versions of stand metadata. Any PUT request will create a new version.
      security:
      - cookieAuth: []
      parameters:
      - in: header
        name: Q-Token
        description: Either the cookie or this Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
        required: true
      - in: cookie
        name: token
        description: Either this cookie or the Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
      - name: uuid
        in: query
        description: The UUID of the stand. If not set, the request will return all stands.
        required: false
        example: 41C0FE2F-EB0C-45B4-8842-C117E47C35E3
        schema:
          type: string
      - name: epoch
        in: query
        description: The Unix Time (epoch) that defines the end time of the query. The beginning is defined by the secondsInThePast parameter. If unset, the epoch will be set to NOW()
        example: 1639170002
        required: true
        schema:
          type: integer
          format: int64
      - name: secondsInThePast
        in: query
        description: How many seconds we go to the past to return data versions. If set to zero, we will return exactly one version. If set to non-zero, we will return all results from the past as well, up to 100 values.
        required: true
        example: 7200
        schema:
          type: integer
          format: int64
      - name: userId
        in: query
        description: The UserID is set internally and can not set or be overridden with the API request. Please ignore.
        required: false
        example: 1234
        schema:
          type: integer
          format: int64

      responses:
        "200":
          description: "Stands"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get-stands-response"
        "400":
          description: Client error
        "500":
          description: Internal error

    put:
      summary: Update stand metadata
      operationId: standsPut
      description: This updates stand metadata. Note that internaly we will actally create a new version of the stand (not the hives). When you issue this call you will have to provide the UUID, otherwise we don't know which stand to update. Also any hives attached to the stand will be ignored, you can only update a single stand at any time.
      security:
      - cookieAuth: []
      parameters:
      - in: header
        name: Q-Token
        description: Either the cookie or this Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
        required: true
      - in: cookie
        name: token
        description: Either this cookie or the Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
      - name: userId
        in: query
        description: The UserID is set internally and can not set or be overridden with the API request. Please ignore.
        required: false
        example: 1234
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/stand"
      responses:
        "201":
          description: "Returns the updated stand"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/put-stand-response"
        "400":
          description: Client error
        "500":
          description: Internal error


    post:
      summary: Create stand metadata
      operationId: standsPost
      description: This creates a new stand. A stand is a logical representation of a location of bee hives.
      security:
      - cookieAuth: []
      parameters:
      - in: header
        name: Q-Token
        description: Either the cookie or this Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
        required: true
      - in: cookie
        name: token
        description: Either this cookie or the Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
      - name: userId
        in: query
        description: The UserID is set internally and can not set or be overridden with the API request. Please ignore.
        required: false
        example: 1234
        schema:
          type: integer
          format: int64

      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/stand"
      responses:
        "201":
          description: "Returns the created stand and the http error code"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/post-stands-response"
        "400":
          description: Client error
        "500":
          description: Internal error

    delete:
      summary: Delete a stand
      operationId: standsDelete
      description: This deletes a stand. If a stand is deleted, it will only get its deleted field set to true. It will not actually be deleted, because we need to always be able to go back in time.
      security:
      - cookieAuth: []
      parameters:
      - in: header
        name: Q-Token
        description: Either the cookie or this Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
        required: true
      - in: cookie
        name: token
        description: Either this cookie or the Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
      - name: userId
        in: query
        description: The UserID is set internally and can not set or be overridden with the API request. Please ignore.
        required: false
        example: 1234
        schema:
          type: integer
          format: int64
      - name: uuid
        in: query
        description: The UUID of the stand.
        required: true
        example: 41C0FE2F-EB0C-45B4-8842-C117E47C35E3
        schema:
          type: string
      responses:
        "200":
          description: "Returns 200 if the delete was successful"
        "400":
          description: Client error
        "500":
          description: Internal error

  /v1/hives:
    get:
      summary: Get Hive metadata
      operationId: hivesGet
      description: This returns all hive metadata for the currently logged in user. Important to understand is that a user can go back into the past at any point in time (how did my bee hive look like a month or a year ago), so the cloud stores multiple versions of hive metadata. Any PUT request will create a new version. W
      security:
      - cookieAuth: []
      parameters:
      - name: uuid
        in: query
        description: The UUID of the hive. If not set, the request will return all hives.
        required: false
        example: 41C0FE2F-EB0C-45B4-8842-C117E47C35E3
        schema:
          type: string
      - name: epoch
        in: query
        description: The Unix Time (epoch) that defines the end time of the query. The beginning is defined by the secondsInThePast parameter. If unset, the epoch will be set to NOW()
        example: 1639170002
        required: true
        schema:
          type: integer
          format: int64
      - name: secondsInThePast
        in: query
        description: How many seconds we go to the past to return data versions. If set to zero, we will return exactly one version.
        required: true
        example: 7200
        schema:
          type: integer
          format: int64
      - name: userId
        in: query
        description: The UserID is set internally and can not set or be overridden with the API request. Please ignore.
        required: false
        example: 1234
        schema:
          type: integer
          format: int64


      responses:
        "200":
          description: "Hives"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get-hives-response"
        "400":
          description: Client error
        "500":
          description: Internal error

    put:
      summary: Update Hive metadata
      operationId: hivesPut
      description: This updates hive metadata. Note that internaly we will actally create a new version of the data.
      security:
      - cookieAuth: []
      parameters:
      - in: header
        name: Q-Token
        description: Either the cookie or this Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
        required: true
      - in: cookie
        name: token
        description: Either this cookie or the Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
      - name: userId
        in: query
        description: The UserID is set internally and can not set or be overridden with the API request. Please ignore.
        required: false
        example: 1234
        schema:
          type: integer
          format: int64

      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/hive"
      responses:
        "200":
          description: "Returns the updated hive"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/put-hive-response"
        "400":
          description: Client error
        "500":
          description: Internal error


    post:
      summary: Create Hive metadata
      operationId: hivesPost
      description: This creates a new hive. A hive is a logical representation of a bee hive that can be connected to hardware.
      security:
      - cookieAuth: []
      parameters:
      - in: header
        name: Q-Token
        description: Either the cookie or this Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
        required: true
      - in: cookie
        name: token
        description: Either this cookie or the Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
      - name: userId
        in: query
        description: The UserID is set internally and can not set or be overridden with the API request. Please ignore.
        required: false
        example: 1234
        schema:
          type: integer
          format: int64

      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/hive"
      responses:
        "200":
          description: "Returns the created hive"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/post-hives-response"
        "400":
          description: Client error
        "500":
          description: Internal error

    delete:
      summary: Delete a Hive
      operationId: hivesDelete
      description: This deletes a hive.
      security:
      - cookieAuth: []
      parameters:
      - in: header
        name: Q-Token
        description: Either the cookie or this Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
        required: true
      - in: cookie
        name: token
        description: Either this cookie or the Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
      - name: userId
        in: query
        description: The UserID is set internally and can not set or be overridden with the API request. Please ignore.
        required: false
        example: 1234
        schema:
          type: integer
          format: int64
      - name: uuid
        in: query
        description: The UUID of the hive.
        required: true
        example: 41C0FE2F-EB0C-45B4-8842-C117E47C35E3
        schema:
          type: string

      responses:
        "200":
          description: "Returns 200 if the delete was successful"
        "400":
          description: Client error
        "500":
          description: Internal error




  /v1/bboxes:
    get:
      summary: Get QBox metadata
      operationId: bboxesGet
      description: This returns QBox metadata for the logged in user. The request needs to present a valid session cookie. There are no query parameters needed here, the request will return all known bboxes.
      security:
      - cookieAuth: []
      responses:
        "200":
          description: "QBox metadata"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/bbox"

        "400":
          description: Client error
        "500":
          description: Internal error

  /v1/temperature:
    get:
      summary: Get Temperature values 
      operationId: temperatureGet
      description: This returns temperate values for a certain, defineable date range. The request needs to send a cookie along with the request. The cookie is stored under the key called "token". Note that this returns the temperature data for a QBox Client (independent of the beeHive), the API call for an actual beeHive is different.
      security:
      - cookieAuth: []

      parameters:
      - in: header
        name: Q-Token
        description: Either the cookie or this Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
        required: true
      - in: cookie
        name: token
        description: Either this cookie or the Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
      - name: bhiveId
        in: query
        description: The Mac Address of the QBox client. You can get all QBox IDs and clients with the /config API call.
        required: true
        example: 829898a53801
        schema:
          type: string
      - name: epoch
        in: query
        description: The Unix Time (epoch) that defines the end time of the scale measurements. The beginning is defined by the secondsInThePast parameter.
        example: 1639170002
        required: true
        schema:
          type: integer
          format: int64
      - name: secondsInThePast
        in: query
        description: How many seconds we go to the past to get the data measurements. 
        required: true
        example: 7200
        schema:
          type: integer
          format: int64
      - name: userId
        in: query
        description: The User ID. This is used internally and will be overwritten if you send it to the api server. Ignore.
        required: false 
        example: 123
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: "Successfully returned a list of scale measurements"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get-temperature-response"

        "400":
          description: Client error
        "500":
          description: Internal error

    post:
      summary: Save a new temperature measurement
      operationId: temperaturePost
      description: This stores a new temperature measurement in the database. Must be authorized wit ha cookie or a token.
      security:
      - cookieAuth: []
      parameters:
      - name: userId
        in: query
        description: The User ID. This is used internally and will be overwritten if you send it to the api server. Ignore.
        required: false 
        example: 123
        schema:
          type: integer
          format: int64

      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/temperature"

      responses:
        "200":
          description: "Generic Response object"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/generic-post-response"
        "400":
          description: "Generic Response object"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/generic-post-response"
        "500":
          description: "Generic Response object"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/generic-post-response"

  /v2/scale:
    get:
      summary: Get Scale values 
      operationId: scaleGetV2
      description: This returns scale values for a certain, defineable date range. The request needs to send a token in the header or a cookie. Note that this returns the scale data for a scale (independent of the beeHive), the API call for an actual beeHive is different.
      # operationId: getScaleValues
      parameters:
      - in: header
        name: Q-Token
        description: Either the cookie, registrationId or this Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
      - in: cookie
        name: token
        description: Either this cookie, registrationId or the Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
      - name: macAddress
        in: query
        description: The Mac Address of the scale.
        required: true
        example: 829898a53801
        schema:
          type: string
      - name: epoch
        in: query
        description: The Unix Time (epoch) that defines the end time of the scale measurements. The beginning is defined by the secondsInThePast parameter.
        example: 1639170002
        required: true
        schema:
          type: integer
          format: int64
      - name: secondsInThePast
        in: query
        description: How many seconds we go to the past to get the data measurements. 
        required: true
        example: 7200
        schema:
          type: integer
          format: int64
      - name: userId
        in: query
        description: The User ID. This is used internally and will be overwritten if you send it to the api server. Ignore.
        required: false 
        example: 123
        schema:
          type: integer
          format: int64

      responses:
        "200":
          description: "Successfully returned a list of scale measurements"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/scaleV2Response"

        "400":
          description: Client error
        "500":
          description: Internal error

    post:
      summary: Post Scale values 
      operationId: scalePostV2
      description: Sends a weight from a scale to the queensaver system. The request needs to send the registrationId along with the request.
      parameters:
      - in: header
        name: registrationId
        description: The unique registration Id for that scale. The user needs to register it first in the cloud, otherwise we will not accept the data.
        schema:
          type: string
        example: 8B0FE5CFC0964B3E874827906B4A9449
        required: true
      - name: userId
        in: query
        description: The User ID. This is used internally and will be overwritten if you send it to the api server. Ignore.
        required: false 
        example: 123
        schema:
          type: integer
          format: int64

      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/scaleV2"

      responses:
        "200":
          description: "Generic Response object"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/generic-post-response"
        "400":
          description: "Generic Response object"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/generic-post-response"
        "500":
          description: "Generic Response object"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/generic-post-response"


  /v1/scale:
    get:
      summary: Get Scale values 
      operationId: scaleGet
      deprecated: true
      description: This returns scale values for a certain, defineable date range. The request needs to send a cookie along with the request. The cookie is stored under the key called "token". Note that this returns the scale data for a QBox Client (independent of the beeHive), the API call for an actual beeHive is different.
      # operationId: getScaleValues
      security:
      - cookieAuth: []

      parameters:
      - in: header
        name: Q-Token
        description: Either the cookie, registrationId or this Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
      - in: cookie
        name: token
        description: Either this cookie, registrationId or the Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
      - name: bhiveId
        in: query
        description: The Mac Address of the QBox client. You can get all QBox IDs and clients with the /config API call.
        required: true
        example: 829898a53801
        schema:
          type: string
      - name: epoch
        in: query
        description: The Unix Time (epoch) that defines the end time of the scale measurements. The beginning is defined by the secondsInThePast parameter.
        example: 1639170002
        required: true
        schema:
          type: integer
          format: int64
      - name: secondsInThePast
        in: query
        description: How many seconds we go to the past to get the data measurements. 
        required: true
        example: 7200
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: "Successfully returned a list of scale measurements"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/weight"

        "400":
          description: Client error
        "500":
          description: Internal error

    post:
      summary: Post Scale values 
      operationId: scalePost
      description: Sends a weight from a hive to the queensaver system. The request needs to send a cookie along with the request. The cookie is stored under the key called "token". Note that this returns the scale data for a QBox Client (independent of the beeHive), the API call for an actual beeHive is different.
      # operationId: getScaleValues
      security:
      - cookieAuth: []

      parameters:
      - in: header
        name: registrationId
        description: Either the cookie, the registrationId or this Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
      - in: header
        name: Q-Token
        description: Either the cookie, the registrationId or this Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
      - in: cookie
        name: token
        description: Either this cookie or the Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
      - name: userId
        in: query
        description: The User ID. This is used internally and will be overwritten if you send it to the api server. Ignore.
        required: false 
        example: 123
        schema:
          type: integer
          format: int64

      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/weight"

      responses:
        "200":
          description: "Generic Response object"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/generic-post-response"
        "400":
          description: "Generic Response object"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/generic-post-response"
        "500":
          description: "Generic Response object"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/generic-post-response"

  /v1/varroa-scan:
    get:
      summary: Get Varroa Scan images and metadata
      operationId: varroaScanGet
      description: This returns varroa scan metadata. You can search for varroa scans for a certain, defineable date range. The request needs to send a cookie along with the request. The cookie is stored under the key called "token". Note that this returns the image for a QBox Client (independent of the beeHive), the API call for an actual beeHive is different.
      security:
      - cookieAuth: []

      parameters:
      - in: header
        name: Q-Token
        description: Either the cookie or this Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
        required: true
      - in: cookie
        name: token
        description: Either this cookie or the Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
      - name: bhiveId
        in: query
        description: The Mac Address of the QBox client. You can get all QBox IDs and clients with the /config API call.
        required: true
        example: 829898a53801
        schema:
          type: string
      - name: epoch
        in: query
        description: The Unix Time (epoch) that defines the end time of the varroa images. The beginning is defined by the secondsInThePast parameter.
        example: 1639170002
        required: false
        schema:
          type: integer
          format: int64
      - name: uuid
        in: query
        description: The UUID of the varra-scan. If not set, the request will return scans in the given time range. If this parameter is given we ignore all time ranges. This is currently not implemented.
        required: false
        example: 41C0FE2F-EB0C-45B4-8842-C117E47C35E3
        schema:
          type: string
      - name: userId
        in: query
        description: The User ID. This is used internally and will be overwritten if you send it to the api server. Ignore.
        required: false 
        example: 123
        schema:
          type: integer
          format: int64
      - name: secondsInThePast
        in: query
        description: How many seconds we go to the past to get the data measurements. 
        required: false 
        example: 7200
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: "Successfully returns a list of varroa scans"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/varroa-scan-response"

        "400":
          description: Client error
        "500":
          description: Internal error

    post:
      summary: Save Varroa Scan metadata
      operationId: varroaScanPost
      description: This saves varroa scan metadata. This is not callable from an external API.
      parameters:
      - name: userId
        in: query
        description: The User ID. This is used internally and will be overwritten if you send it to the api server. Ignore.
        required: false 
        example: 123
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/varroa-scan"
      responses:
        "200":
          description: "OK"
        "400":
          description: Client error
        "500":
          description: Internal error

  /v1/varroa-scan-image:
    post:
      summary: Save Varroa Scan image
      operationId: varroaScanImagePost
      description: Upload a varroa scan image here. The file is attached via multipart/form-data.
      parameters:
      - in: header
        name: Q-Token
        description: Either the cookie or this Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
        required: true
      - in: cookie
        name: token
        description: Either this cookie or the Q-Token must be set to be authorized for the API call.
        schema:
          type: string
        example: 8B0FE5CF-C096-4B3E-8748-27906B4A9449
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  format: int64
                  description: the internal user id of the authenticated user. Will be set internally in the cloud system and does not have an effect if set via the API call as it will be overridden. Don't set this value.
                  example: 4
                bhiveId:
                  description: The Mac Address of the QBox client. You can get all QBox IDs and clients with the /config API call.
                  example: 829898a53801
                  type: string
                epoch:
                  description: The Unix Time (epoch) that defines the end time of the varroa images. The beginning is defined by the secondsInThePast parameter.
                  example: 1639170002
                  type: integer
                  format: int64
                scan:
                  type: string
                  format: byte
      responses:
        "200":
          description: "OK"
        "400":
          description: Client error
        "500":
          description: Internal error


components:

  securitySchemes:
    cookieAuth:  # arbitrary name for the security scheme; will be used in the "security" key later
      type: apiKey
      in: cookie
      name: token # cookie name

#  parameters:
#    rowParam:
#      description: Board row (vertical coordinate)
#      name: row
#      in: path
#      required: true
#      schema:
#        $ref: "#/components/schemas/coordinate"
#    columnParam:
#      description: Board column (horizontal coordinate)
#      name: column
#      in: path
#      required: true
#      schema:
#        $ref: "#/components/schemas/coordinate"
  schemas:
    errorMessage:
      type: string
      maxLength: 256
      description: A text message describing an error
#    board:
#      type: array
#      maxItems: 3
#      minItems: 3
#      items:
#        type: array
#        maxItems: 3
#        minItems: 3
#        items:
#          $ref: "#/components/schemas/mark"
    id:
      type: integer
      minimum: 1
      example: 15
      description: ID of the object. The ID is usually determined by the DBMS.

    varroa-scan-metadata:
      type: object
      properties:
        class:
          type: string
          description: "classification of the object - we currently support: bee_leg,bee,mite,bee_wing,ant,wax_moth_droppings,wax_platelets,pollen,bee_droppings,cell_cover_grist"
          example: "mite"
          x-protobuf-index: 1
        confidence:
          type: number
          format: double
          description: how confident the AI is regarding the result
          example: 0.27206607659657794
          x-protobuf-index: 2
        xCenter:
          type: number
          format: double
          description: center of the object on the x axis
          example: 0.27206607659657794
          x-protobuf-index: 3
        yCenter:
          type: number
          format: double
          description: center of the object on the y axis
          example: 0.27206607659657794
          x-protobuf-index: 4
        width:
          type: number
          format: double
          description: width of the object
          example: 0.27206607659657794
          x-protobuf-index: 5
        height:
          type: number
          format: double
          description: height of the object
          example: 0.27206607659657794
          x-protobuf-index: 6

    varroa-scan:
      type: object
      properties:
        bhiveId:
          type: string
          description: bhiveId to identify the data source. Might become empty in a future iteration as it's redundant with the query parameter.
          example: "829898a53801"
          x-protobuf-index: 1
        imageUrl:
          type: string
          description: URL to the image of the varroa scan
          example: https://api.queensaver.com/images/1234.jpg
          x-protobuf-index: 2
        epoch:
          type: integer
          format: int64
          description: timestamp of the measurement on one second precision
          example: 1639169129
          x-protobuf-index: 3
        metadata:
          type: array
          items:
            $ref: "#/components/schemas/varroa-scan-metadata"
          x-protobuf-index: 4
        mites:
          type: integer
          format: int64
          description: the number of varroa mites in a scan
          example: 3
          x-protobuf-index: 5
        scan:
          type: string
          format: byte
          description: the scanned image data in binary format. this is used internally and won't surface at the API server (any data will be ignored).
          x-protobuf-index: 6

    bbox-config-response:
      type: object
      properties:
        httpResponseCode:
          type: integer
          example: 409
          description: HTTP response code.
          x-protobuf-index: 1
        scaleMeasureInterval:
          type: integer
          example: 409
          description: How often the bbox needs to take and send measurements from the scale. The unit is in seconds.
          x-protobuf-index: 2

    authenticate-post-response:
      type: object
      properties:
        httpResponseCode:
          type: integer
          example: 409
          description: HTTP response code.
          x-protobuf-index: 1
        userId:
          type: integer
          format: int64
          description: the user id.
          example: 1
          x-protobuf-index: 2

    login-post-response:
      type: object
      properties:
        httpResponseCode:
          type: integer
          example: 409
          description: HTTP response code.
          x-protobuf-index: 1
        token:
          type: string
          description: cookie that is returned as a cookie to the browser
          example: "asdf"
          x-protobuf-index: 2

    generic-post-response:
      type: object
      properties:
        httpResponseCode:
          type: integer
          example: 409
          description: HTTP response code.
          x-protobuf-index: 1

    varroa-scan-response:
      type: object
      properties:
        httpResponseCode:
          type: integer
          example: 409
          description: HTTP response code. Used for internal purposes, will be sent out at the API.
          x-protobuf-index: 1
        varroaScans:
          type: array
          items:
            $ref: "#/components/schemas/varroa-scan"
          x-protobuf-index: 2

    put-hive-response:
      type: object
      properties:
        httpResponseCode:
          type: integer
          example: 409
          description: HTTP response code. Used for internal purposes, will be sent out at the API.
          x-protobuf-index: 1
        hive:
          $ref: "#/components/schemas/hive"
          x-protobuf-index: 2

    post-hives-response:
      type: object
      properties:
        httpResponseCode:
          type: integer
          example: 409
          description: HTTP response code. Used for internal purposes, will be sent out at the API.
          x-protobuf-index: 1
        hive:
          $ref: "#/components/schemas/hive"
          x-protobuf-index: 2

    put-bbox-response:
      type: object
      properties:
        httpResponseCode:
          type: integer
          example: 409
          description: HTTP response code. Used for internal purposes, will be sent out at the API.
          x-protobuf-index: 1
        bbox:
          $ref: "#/components/schemas/bbox"
          x-protobuf-index: 2

    post-bbox-response:
      type: object
      properties:
        httpResponseCode:
          type: integer
          example: 409
          description: HTTP response code. Used for internal purposes, will be sent out at the API.
          x-protobuf-index: 1
        bbox:
          $ref: "#/components/schemas/bbox"
          x-protobuf-index: 2

    get-bbox-response:
      type: object
      properties:
        bboxes:
          type: array
          items:
            $ref: "#/components/schemas/bbox"
          x-protobuf-index: 1
        httpResponseCode:
          type: integer
          example: 409
          description: HTTP response code. Used for internal purposes, will be sent out at the API.
          x-protobuf-index: 2

    put-stand-response:
      type: object
      properties:
        httpResponseCode:
          type: integer
          example: 409
          description: HTTP response code. Used for internal purposes, will be sent out at the API.
          x-protobuf-index: 1
        stand:
          $ref: "#/components/schemas/stand"
          x-protobuf-index: 2

    post-stands-response:
      type: object
      properties:
        httpResponseCode:
          type: integer
          example: 409
          description: HTTP response code. Used for internal purposes, will be sent out at the API.
          x-protobuf-index: 1
        stand:
          $ref: "#/components/schemas/stand"
          x-protobuf-index: 2

    get-stands-response:
      type: object
      properties:
        stands:
          type: array
          items:
            $ref: "#/components/schemas/stand"
          x-protobuf-index: 1
        httpResponseCode:
          type: integer
          example: 409
          description: HTTP response code. Used for internal purposes, will be sent out at the API.
          x-protobuf-index: 2

    get-hives-response:
      type: object
      properties:
        hives:
          type: array
          items:
            $ref: "#/components/schemas/hive"
          x-protobuf-index: 1
        httpResponseCode:
          type: integer
          example: 409
          description: HTTP response code. Used for internal purposes, will be sent out at the API.
          x-protobuf-index: 2


    get-temperature-response:
      type: object
      properties:
        temperatures:
          type: array
          items:
            $ref: "#/components/schemas/temperature"
          x-protobuf-index: 1
        httpResponseCode:
          type: integer
          example: 409
          description: HTTP response code. Used for internal purposes, will be sent out at the API.
          x-protobuf-index: 2
            

    temperature:
      type: object
      properties:
        bhiveId:
          type: string
          description: bhiveId to identify the data source. Might become empty in a future iteration as it's redundant with the query parameter.
          example: "829898a53801"
          x-protobuf-index: 1
        temperature:
          type: number
          format: float
          description: actual measurement of the temperature
          example: 13.2345
          x-protobuf-index: 2
        epoch:
          type: integer
          format: int64
          description: timestamp of the measurement on one second precision
          example: 1639169129
          x-protobuf-index: 3

      required:
      - bhiveId
      - temperature
      - epoch

    scaleV2Response:
      type: object
      properties:
        httpResponseCode:
          type: integer
          example: 409
          description: HTTP response code. Used for internal purposes, will be let out at the API level.
          x-protobuf-index: 1
        values:
          type: array
          items: 
            $ref: "#/components/schemas/scaleV2"
          description: The measurement responses
          x-protobuf-index: 2

    scaleV2:
      type: object
      properties:
        macAddress:
          type: string
          description: The mac address of the scale
          example: "829898a53801"
          x-protobuf-index: 1
        weight:
          type: number
          format: float
          description: actual measurement of weight
          example: 53.2345
          x-protobuf-index: 2
        epoch:
          type: integer
          format: int64
          description: timestamp of the measurement on one second precision
          example: 1639169129
          x-protobuf-index: 3

    weight:
      type: object
      properties:
        bhiveId:
          type: string
          description: bhiveId to identify the data source.
          example: "829898a53801"
        weight:
          type: number
          format: float
          description: actual measurement of weight
          example: 53.2345
        epoch:
          type: integer
          format: int64
          description: timestamp of the measurement on one second precision
          example: 1639169129

    registrationId:
      type: object
      properties:
        registrationId:
          type: string
          maxLength: 256
          description: Registration ID, in the form of the unique identifier 
          example: 422DBCF1873243F4BF537E76C4CF28E9
      required:
      - registrationId

    login:
      type: object
      properties:
        username:
          type: string
          maxLength: 256
          description: Username, must be unique to the queensaver system. We encourage using email-addresses here.
          example: jon@doe.com
        password:
          type: string
          format: password
          description: Password
          example: trustno1
      required:
      - username
      - password

    bhive:
      type: object
      properties:
        bhiveId:
          type: string
          maxLength: 256
          description: The ID of a beehive. Is unique for that user.
          example: "829898a53801"
          x-protobuf-index: 1
        scaleOffset:
          type: number
          format: float
          description: Scale offset number (calibration data)
          example: 1234
          x-protobuf-index: 2
        scaleReferenceUnit:
          type: number
          format: float
          description: Scale Reference Unit (calibration data)
          example: 1234
          x-protobuf-index: 3

    stand:
      type: object
      properties:
        hives:
          type: array
          items: 
            $ref: "#/components/schemas/hive"
          description: A stand can have many hives. However, when sending POST or PUT requests you can only update the stand metadata, any hives attached to this array will be ignored. You will have to do the /hives API call instead to create / update hives with the correct stand UUID. This array will only be populated with GET requests.
          x-protobuf-index: 1
        name:
          type: string
          example: "B"
          description: Name of the stand. Can be chosen by the user. A stand is a collection of bee hives.
          x-protobuf-index: 2
        latitude:
          type: number
          format: double
          description: latitude of the stand
          x-protobuf-index: 3
        longitude:
          type: number
          format: double
          description: longitude of the stand
          x-protobuf-index: 4
        httpReponseCode:
          type: integer
          example: 409
          description: HTTP response code. Used for internal purposes, will be let out at the API level.
          x-protobuf-index: 6
        epoch:
          type: integer
          format: int64
          example: 1639170002
          description: Epoch when the data was last updated. This will be set internally, no need to add this with PUT or POST calls.
          x-protobuf-index: 7
        uuid:
          type: string
          example: 41C0FE2F-EB0C-45B4-8842-C117E47C35E3
          description: Unique Identifier for this stand
          x-protobuf-index: 8
        deleted:
          type: boolean
          example: true
          description: "if set to true, the hive has been deleted at this epoch."
          x-protobuf-index: 9


      required:
      - name

    alerts:
      type: object
      properties:
        alertType:
          enum:
          - VarroaHigh
          - WeightLow
          - QueenLess
          description: Various alerts a bee hive can have.
          example: "VarroaHigh"
          x-protobuf-index: 1
      required:
      - alertType

    hive:
      type: object
      properties:
        name:
          type: string
          example: "B25"
          description: Name of the hive. Can be chosen by the user.
          x-protobuf-index: 1
        public:
          type: boolean
          description: If the hive can be viewed by other users in the queensaver system
          example: true
          x-protobuf-index: 2
        standUuid:
          type: string
          example: 41C0FE2F-EB0C-45B4-8842-C117E47C35E3
          description: Unique Identifier of the stand that this hive is part of. Must be defined.
          x-protobuf-index: 3
        uuid:
          type: string
          example: 41C0FE2F-EB0C-45B4-8842-C117E47C35E3
          description: Unique Identifier for this hive
          x-protobuf-index: 4
        comment:
          type: string
          example: "This hive needs to be replaced next year"
          description: Random note or user comment
          x-protobuf-index: 5
        capacity:
          type: integer
          minimum: 1
          maximum: 50
          example: 10
          description: How many honeycombs a frame can load
          x-protobuf-index: 6
        format:
          type: string
          enum:
          - Zander
          - Dadant
          description: The format of the frame
          example: "Dadant"
          x-protobuf-index: 7
        frames:
          type: integer
          x-protobuf-index: 8
          description: The number of frames the bee hive has
          example: 3
        alerts:
          x-protobuf-index: 9
          type: array
          items:
            $ref: "#/components/schemas/alerts"
        bhiveId:
          type: string
          maxLength: 256
          description: The ID of beehive electronics (QBox client).
          example: "829898a53801"
          x-protobuf-index: 10
        httpReponseCode:
          type: integer
          example: 409
          description: HTTP response code. Used for internal purposes, will be let out at the API level.
          x-protobuf-index: 11
        epoch:
          type: integer
          format: int64
          example: 1639170002
          description: Epoch when the data was last updated. This will be set internally, no need to add this with PUT or POST calls.
          x-protobuf-index: 12
        deleted:
          type: boolean
          example: true
          description: "if set to true, the hive has been deleted at this epoch."
          x-protobuf-index: 13
      required:
      - standUuid
      - name
 
    bbox:
      type: object
      properties:
        bboxId:
          type: string
          maxLength: 256
          description: The ID of the bbox electronix (QBox). Is usually a mac address of a network interface.
          x-protobuf-index: 1
        schedule:
          type: string
          maxLength: 256
          description: A cron type of description of when the sensore measurements are supposed to be done.
          example: "03 6,12,16,20 * * *"
          x-protobuf-index: 2
        uuid:
          type: string
          example: 41C0FE2F-EB0C-45B4-8842-C117E47C35E3
          description: Unique Identifier for this bbox
          x-protobuf-index: 3
        bhives:
          type: array
          items:
            $ref: "#/components/schemas/bhive"
          x-protobuf-index: 4
        powerSave:
          type: boolean
          example: true
          description: If the bbox turns the power off after a successful run and wakes up later according to the schedule.
          x-protobuf-index: 5
        registrationId:
          type: string
          maxLength: 256
          description: The registration ID of the bbox. The user needs to put this into the interface so that the bbox can then register via the /configs/bbox/register API call to retrieve the token.
          x-protobuf-index: 6
        hardwareType:
          type: string
          example: scale
          maxLength: 256
          description: Hardware type of the bbox - could be a varroa-scanner or a scale, etc.
          x-protobuf-index: 7
        hardwareRevision:
          type: integer
          format: int64
          description: Hardware revision - newer revisions might have different features which are important to know.
          example: 1
          x-protobuf-index: 8

    user:
      type: object
      properties:
        username:
          type: string
          maxLength: 256
          description: Username, must be unique to the queensaver system. We encourage using email-addresses here.
          example: jon@doe.com
        password:
          type: string
          format: password
          description: Password
        firstName:
          type: string
          maxLength: 256
          description: First name of the user
          example: Hans
        lastName:
          type: string
          maxLength: 256
          description: Last name of the user
          example: Ecker
      required:
      - username
      - password
      - firstName
      - lastName
